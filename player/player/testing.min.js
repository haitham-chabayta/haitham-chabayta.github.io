function TotalComplete(fff) {
  this.totalComplete = fff ;
  
  this.handlers = [] ;

  this.onComplete = function () {
      this.handlers.push(f) ;
      var me = this ;
      return f ;

      function f() {
          if (ArrayUtils.removeObjectFromArray(f, me.handlers))
              me.checkTotalcomplete() ;
      }
  } ;

  this.checkTotalcomplete = function(){
      if (!this.handlers.length && this.totalComplete) {
          this.totalComplete() ;
          this.totalComplete = null ;
      }
  };

  var f1 = this.onComplete() ;

  this.start = function () {
      f1() ;
  };
}

var ArrayUtils = {
  removeObjectFromArray:function (obj, arr) {
      for (var i = 0; i < arr.length; i++) {
          if (arr[i] === obj) {
              arr.splice(i, 1) ;
              return true;
          }
      }
      return false ;
  }
} ;

var MathUtils = {
  clamp : function(n, min, max) {
      if (n < min) return min;
      if (n > max) return max;
      return n;
  },

  randRange : function(r1,r2) {
      return r1 + Math.random() * (r2 - r1) ;
  },

  roundRandRange : function (r1, r2) {
      return Math.round(MathUtils.randRange(r1,r2)) ;
  }

} ;

var Effects = {} ;
/**
*
* @param $obj element to be rotated
* @param from initial angle
* @param to final angle
* @param tween animation parameters
*/
Effects.rotate2 = function($obj, from, to, tween) {
  // caching the object for performance reasons
  tween.step = function(now) {
      $obj.css({
          transform: 'rotate(' + now + 'deg)'
      });
  } ;
  var handler = tween.complete ;
  tween.complete = complete ;


  $({deg: from}).animate({deg: to}, tween);

  function complete() {
      $obj.css('transform', 'rotate('+ String(to) +'deg)') ;
      if (handler) handler() ;
  }
} ;

/**
* Rectangle based on https://github.com/paperjs/paper.js/blob/develop/src/basic/Rectangle.js
* @param x
* @param y
* @param width
* @param height
* @constructor
*/

function Rectangle(arg0, arg1, arg2, arg3) {
  this.x = 0;
  this.y = 0;
  this.width = 0;
  this.height = 0;

  this._set = function(x, y, width, height) {
      this.x = x;
      this.y = y;
      this.width = width;
      this.height = height;
      return this;
  } ;

  this.getArea = function() {
      return this.width * this.height;
  } ;

  this.isEmpty = function() {
      return this.width === 0 || this.height === 0;
  } ;

  this.intersect = function(rect) {
      var x1 = Math.max(this.x, rect.x),
          y1 = Math.max(this.y, rect.y),
          x2 = Math.min(this.x + this.width, rect.x + rect.width),
          y2 = Math.min(this.y + this.height, rect.y + rect.height);
      return new Rectangle(x1, y1, x2 - x1, y2 - y1);
  } ;

  this.toString = function() {
      return '{ x: ' + this.x
          + ', y: ' + this.y
          + ', width: ' + this.width
          + ', height: ' + this.height
          + ' }';
  } ;

  this.union = function(rect) {
      var x1 = Math.min(this.x, rect.x),
          y1 = Math.min(this.y, rect.y),
          x2 = Math.max(this.x + this.width, rect.x + rect.width),
          y2 = Math.max(this.y + this.height, rect.y + rect.height);
      return new Rectangle(x1, y1, x2 - x1, y2 - y1);
  } ;

  this.getRight = function() {
      return this.x + this.width;
  } ;

  this.getBottom = function() {
      return this.y + this.height;
  } ;

  this.getCenterX = function() {
      return this.x + this.width / 2;
  } ;

  this.getCenterY = function() {
      return this.y + this.height / 2;
  } ;

  var type = typeof arg0;
  if (type === 'number') {
      // new Rectangle(x, y, width, height)
      this._set(arg0, arg1, arg2, arg3);
  } else if (type === 'undefined' || arg0 === null) {
      // new Rectangle(), new Rectangle(null)
      this._set(0, 0, 0, 0);
  } else if (arguments.length === 1) {
      // This can either be an array, or an object literal.
      if (Array.isArray(arg0)) {
          this._set.apply(this, arg0);
      } else if (arg0.x !== undefined || arg0.width !== undefined) {
          // Another rectangle or a simple object literal
          // describing one. Use duck typing, and 0 as defaults.
          this._set(arg0.x || 0, arg0.y || 0,
              arg0.width || 0, arg0.height || 0);
      }
  }
}


var Main = {

};


Main.xml = undefined ;
Main.status = "none" ;
Main.autoStart = false ;
Main.$viewer = undefined ;
Main.$systemContainer = undefined ;
Main.$nextButton = undefined ;
Main.$subtitlesPopup = undefined ;
Main.$customNextButton = undefined ;
Main.$submitButton = undefined ;
Main.globalDictionary = {} ;
Main.isMobile = false ;
Main.baseUrl = "" ;
Main.timeMultiplier = 1000 ;
Main.UID = "" ;

Main.init = function () {
    Main.createSystemElements();
    Main.$viewer.on(PlayerEvents.CONTENT_READY, Main.onContentReady) ;
    Main.$viewer.on(PlayerEvents.SHOW_NEXT_BUTTON, Main.showNextButton) ;
    Main.$viewer.on(PlayerEvents.SHOW_SUBMIT_BUTTON, Main.showSubmitButton) ;
    Main.$viewer.on(PlayerEvents.ANIMATION_COMPLETED, Main.onAnimationCompleted) ;
    $( "body" ).keydown(Main.onKeyDown) ;
    Main.controls = { } ;
    Main.soundManager = new SoundManager() ;
    Main.isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ;
    Main.isTouchDevice = is_touch_device() ;

    function is_touch_device() {
        var prefixes = ' -webkit- -moz- -o- -ms- '.split(' ');
        var mq = function(query) {
            return window.matchMedia(query).matches;
        } ;
        if (('ontouchstart' in window) || window.DocumentTouch && document instanceof DocumentTouch) {
            return true;
        }
        var query = ['(', prefixes.join('touch-enabled),('), 'heartz', ')'].join('');
        return mq(query);
    }
} ;

Main.switchFxAnimation = function(enabled) {
    $.fx.off = !enabled ;
    Main.timeMultiplier = enabled ? 1000 : 1 ;
} ;

Main.switchSound = function(enabled) {
    Main.soundManager.enabled = enabled ;
} ;


Main.updateProgressBar = function(value, total) {
    /*var $bar = $("#progressbar") ;
    if (!$($bar).is(":visible"))
       return ;

    var $body = $("body") ;
    var ww = $('#topicfooter').width() ;

    var dx = ww / total ;

    $bar.animate({width: value*dx}, {progress:onProgress}) ;

    function onProgress() {
        var $star = $('<div class="progresstar"/>') ;
        $star.css("left", $bar.css("width")) ;
        $star.css("top", 0) ;
        $body.append($star) ;
        var dx = MathUtils.randRange(0,50) ;
        var sign = Math.random() > 0.5 ? "+=" : "-=" ;
        var dy = MathUtils.randRange(100,250) ;
        $star.animate({top:"+=" + String(dy), left:sign + String("dx"), opacity:0}, {complete:function () {
            $star.remove() ;
        }}) ;
    }*/
} ;

Main.createSystemElements = function(){
    var e = localStorage.getItem("topicpath");
    var head = $("head")  
    var link = document.createElement('link'); 
    link.rel = 'stylesheet';  
    link.type = 'text/css'; 
    link.href = e+'main.css?v='+Math.random();
    head.append(link); 

    var $body = $("body") ;
    
    //$body.append('<div id="topicheader" class="topicheader01">Some topic</div>') ;
    $body.append('<div id="content"></div>') ;
    $body.append('<div id="topicfooter"/>') ;
    //$body.append('<div id="progressbar" />') ;
    var $div = $('<div id="system-container"/>') ;
    $body.append($div) ;
    Main.$systemContainer = $('<div id="relative-system-container"/>') ;
    $div.append(Main.$systemContainer) ;
    Main.$systemContainer.append('<div id="next-button" />') ;
    Main.$systemContainer.append('<div id="submit-button" />') ;
    Main.$systemContainer.append('<div id="correct-bubble" />') ;
    Main.$systemContainer.append('<div id="incorrect-bubble" />') ;
    Main.$systemContainer.append('<div id="noresponse-bubble">Please&nbsp;complete&nbsp;your&nbsp;answer.</div>') ;
    Main.$viewer = $( "#content" ) ;
    Main.$nextButton = $("#next-button") ;
    Main.$submitButton = $("#submit-button") ;

    Main.$subtitlesPopup = $('<div id="subtitlesPopup"/>') ;
    Main.$subtitlesPopup.append('<div/>') ;
    $body.append(Main.$subtitlesPopup) ;
    Main.$subtitlesPopup.click(Main.hideSubtitles) ;
} ;

Main.setBaseUrl = function (url) {
    Main.baseUrl = url ;
    if (Main.baseUrl !== "") {
        $('base').attr('href', Main.baseUrl) ;
    }
} ;

Main.setAspectRatio = function (ratio) {
   var myRatio = 768/954 ;
   if (ratio > myRatio) {
       var ww = ratio * 954 ;
       var dw = (ww - 768) / 2 ;

       //$("#progressbar").css("width", ww + "px") ;
       $("#topicfooter").css("width", ww + "px") ;
       Main.$viewer.css("left", dw + "px") ;
       Main.$systemContainer.css("left", dw + "px") ;
   } else {
       var hh = 768 / ratio ;
       var dh = (hh - 954) / 2 ;
       //$("#progressbar").css("top", String(945 + dh) + "px") ;
       $("#topicfooter").css("top", String(945 + dh) + "px") ;
       Main.$systemContainer.css("top", dh + "px") ;
   }
} ;

Main.setTopicHeader = function (s, n) {
    /*var $h = $("#topicheader") ;
    $h.html(s) ;
    n = n%5 + 1 ;
    $h.removeClass() ;
    $h.addClass('topicheader0' + n) ;*/
} ;

Main.setTopicFooter = function (n) {
    /*var $h = $("#topicfooter") ;
    n = n%5 + 1 ;
    $h.removeClass() ;
    $h.addClass('topicfooter0' + n) ;*/
} ;

Main.setTopicFooterColor = function (color) {
    $("#topicfooter").css('background', color) ;
} ;

Main.watchInputs = function(){
    Main.$viewer.append('<span id="hidden_span"></span>') ;
    $hiddenSpan = $("#hidden_span") ;

    Main.$viewer.find('input[type=number]').each(function() {
        var $input = $(this) ;
        $input.wrap('<span class="inputWrapper"/>') ;
        $input.on('input',onInputChanged) ;
        $input.prop("autocomplete", "off") ;
        var maxlength = $input.prop("maxlength") ;
        if($input.prop("maxlength") < 0)
            $input.prop("maxlength", "5") ;
        var fontSize = $input.css("font-size") ;
        $input.css("width",parseInt(fontSize)+6);
        $input.prop("lastvalue", "") ;
        if (!Main.isMobile)
             $input.prop("type","text") ;
    });
    
    function onInputChanged(e) {
        var $input = $(this) ;
        $hiddenSpan.html("");
        var fontSize = $input.css("font-size") ;
        var maxlength = $input.prop("maxlength") ;
        var lastvalue = $input.prop("lastvalue") ;
        if ($input.val().length > maxlength) {
            $input.val(lastvalue) ;
            return false;
        }
        replaceMinusSign($input) ;
        $input.prop("lastvalue", $input.val()) ;
        $hiddenSpan.css("font-size", fontSize) ;
        $hiddenSpan.append("<p>"+$input.val()+"</p>");
        var ww= Math.max($hiddenSpan.width(), parseInt(fontSize)) + 6 ;
        //ww = Math.min(ww,100);
        $(this).css("width",ww);
    }

    function replaceMinusSign($input) {
        var s = $input.val() ;
        s = s.replace("-","−") ;
        $input.val(s) ;
    }

} ;

Main.prepareFractions = function () {
    $( "span.frac" ).each(function() {
        var f = new CommonFraction($(this)) ;
        if (f.id !== "")
            Main.controls[f.id] = f ;
    });
} ;

Main.prepareRadioButtons = function () {
    $("input[type=radio]").wrap('<div class="radioContainer"></div>') ;
    $("input[type=radio]").before('<div class="radioSkinUpDisabled"/>') ;
    $("input[type=checkbox]").wrap('<div class="radioContainer"></div>') ;
    $("input[type=checkbox]").before('<div class="checkboxSkinUpDisabled"/>') ;
} ;

Main.prepareListboxes = function () {
    $("select").wrap('<div class="listboxContainer"/>') ;

   /* $("select").each(function () {
        var $listbox = $(this) ;
        $listbox.wrap('<div class="listboxContainer"/>') ;
        var $div = $('<div class="listboxSkinDisabled">...</div>') ;
        $listbox.before($div) ;
        $div.width($listbox.width()) ;
    }) ;*/

};

Main.prepareWTD = function () {
   $("div.wtdPopup").each(function () {
        var $pencil = $('<div class="wtdPencil"/>') ;
        var $wtd = $(this) ;
        $wtd.append($pencil) ;
       $pencil.position({my:"left top", at:"left+28 top+45", of:$wtd}) ;
   })  ;
} ;


Main.prepareCounters = function () {
   $("counter").each(function() {
       var $counter = $(this) ;
       var $div = $('<div class="counter">1</div>') ;
       $div.html($counter.html()) ;
       $div[0].style = $counter[0].getAttribute("style") ;
       $div[0].id = $counter[0].getAttribute("id") ;
       var size = $counter[0].getAttribute("size") ;
       if (size) {
           size = parseInt(size) ;
           $div.css("font-size", String(size) + "px") ;
           //$div.css("width", String(size+6) + "px") ;
           //$div.css("height", String(size+6) + "px") ;
           //$div.css("border-radius", String((size+6)/2) + "px") ;
       }

       $counter.replaceWith($div);
   }) ;
} ;

Main.onKeyDown = function(event ) {
    if ( event.which == 13 ) {
        event.preventDefault();
        if (Main.$nextButton.is(":visible"))
            Main.$nextButton.trigger("click") ;
        else if (Main.$submitButton.is(":visible"))
            Main.$submitButton.trigger("click") ;
    }
} ;

Main.loadXML = function (xmlName) {
    console.log("Start loading ", xmlName);
    $.get( xmlName, onComplete).fail(function() {
        console.log("Loading error") ;
        }) ;

    function onComplete(xml) {
        console.log("XML loaded") ;
        console.log(xml) ;
        Main.xml = xml ;
        Main.parseContent() ;
    }
};

Main.parseContent = function () {
    var serializer = new XMLSerializer() ;
    correctListboxes() ;
    correctChoose() ;
    correctFractions() ;
    correctDnDTargets() ;
    correctDnDCards() ;
    showTopicHeader() ;

    var content = Main.xml.getElementsByTagName("content")[0].childNodes ;
    var s = "" ;
    for (var i=0; i < content.length; i++) {
        s += serializer.serializeToString(content[i]) ;
    }
    document.getElementById("content").innerHTML = s.trim() ;
    Main.prepareFractions() ;
    Main.watchInputs() ;
    Main.prepareRadioButtons() ;
    Main.prepareListboxes() ;
    Main.prepareCounters() ;
    Main.prepareWTD();
    var tc = new TotalComplete(ready) ;
    Main.soundManager.preloadSounds(Main.xml.getElementsByTagName("soundEffects")[0], tc.onComplete(), "effect_") ;
    Main.soundManager.preloadSounds(Main.xml.getElementsByTagName("sounds")[0], tc.onComplete(), "") ;
    tc.start() ;
    parseUID() ;

    function ready() {
        Main.status = PlayerEvents.CONTENT_READY ;
        Main.$viewer.trigger( PlayerEvents.CONTENT_READY );
    }

    function parseUID() {
        var $uid = $(Main.xml).find("attributes").find("UID") ;
        if ($uid.length) {
            Main.UID = $uid[0].textContent ;
            console.log(Main.UID)
        } else {
            console.warn("UID is not set!!!") ;
        }
    }

    function correctListboxes() {
        var arr = Main.xml.getElementsByTagName("select") ;
        for (var i=0; i<arr.length; i++) {
            var item = arr[i] ;
            //var opt = parser.parseFromString('<option value="" selected="true" disabled="true" hidden="true">...</option>', "application/xml");
            var opt = Main.xml.createElement("option");
            opt.setAttribute("value", "");
            opt.setAttribute("selected", "true");
            opt.setAttribute("disabled", "true");
            opt.setAttribute("hidden", "true");
            // item.appendChild(opt) ;
            opt.appendChild(Main.xml.createTextNode("...")) ;
            item.insertBefore(opt, item.childNodes[0]);
        }
    }

    function correctDnDTargets() {
        var $xml = $(Main.xml) ;
        var $targets = $xml.find('dndTarget') ;
        $targets.each(function () {
            var $t = $(this) ;
            var style = $t.attr("style") ? $t.attr("style") : "" ;
            var $span = $('<span class="dndTargetDisabled dndTarget" style="' + style + '"/>') ;
            if ($t.prop("id"))
                $span.prop("id", $t.prop("id")) ;
            if ($t.attr("width"))
                $span.css('width', $t.attr("width")+"px") ;
            if ($t.attr("height"))
                $span.css('height', $t.attr("height")+"px") ;
            $(this).replaceWith($span) ;
        }) ;
    }

    function correctDnDCards() {
        var $xml = $(Main.xml) ;
        var $cards = $xml.find('dndCard') ;
        $cards.each(function () {
            var $c = $(this) ;
            var style = $c.attr("style") ? $c.attr("style") : "" ;
            var $span = $('<span class="dndCardDisabled dndCard" style="' + style + '">' + $c.html() + '</span>') ;
            if ($c.prop("id"))
                $span.prop("id", $c.prop("id")) ;
            if ($c.attr("width"))
                $span.css('width', $c.attr("width")+"px") ;
            $(this).replaceWith($span) ;
        }) ;
    }

    function correctChoose() {
        var collection = Main.xml.getElementsByTagName("choose") ;
        var arr = [] ;
        for (var i=0; i<collection.length; i++)
            arr.push(collection[i]) ;

        arr.forEach(function (oldNode) {
            var newNode = renameNode(oldNode, "span") ;
            newNode.className = "chooseUpDisabled choose" ;
        }) ;
    }

    function correctFractions() {
        var collection = Main.xml.getElementsByTagName("frac") ;
        var arr = [] ;
        for (var i=0; i<collection.length; i++)
            arr.push(collection[i]) ;

        arr.forEach(function (oldNode) {
            var newNode = renameNode(oldNode, "span") ;
            if (oldNode.hasAttribute("maxlength"))
                newNode.setAttribute("maxlength", oldNode.getAttribute("maxlength"));

            newNode.className = "frac" ;
        }) ;
    }

    function renameNode(oldNode, newName) {
        var newNode = Main.xml.createElement(newName) ;
        var nextNode;
        var node = oldNode.firstChild;

        while (node) {
            nextNode = node.nextSibling;
            newNode.appendChild(node);
            node = nextNode;
        }
        if (oldNode.hasAttribute("id"))
            newNode.id = oldNode.id;
        if (oldNode.hasAttribute("style"))
            newNode.setAttribute("style", oldNode.getAttribute("style")) ;
        oldNode.parentNode.replaceChild(newNode, oldNode);
        return newNode ;
    }

    function showTopicHeader() {
        var node =  Main.xml.getElementsByTagName("content")[0] ;

        var bgcolor = "white" ;
        if (node.hasAttribute("bgcolor")) {
            bgcolor = node.getAttribute("bgcolor") ;
        }

        $('body').css("background", bgcolor) ;
        // parent.$('body').css("background-color", bgcolor) ;
        // parent.$('.frame').css("background-color", bgcolor) ;

    }

};

Main.getBackgroundColor = function () {
    return $('body').css("background-color") ;
} ;

Main.onContentReady = function (event ) {
    Main.marker = new Marker() ;
    $("#content :input").prop('disabled', true);
    if (Main.autoStart)
        Main.startAnimation() ;
};

Main.startAnimation = function () {
    StepManager.start(Main.xml.getElementsByTagName("steps")[0]) ;
} ;

Main.onAnimationCompleted = function() {
   console.log("Animation completed") ;
   Main.status = PlayerEvents.ANIMATION_COMPLETED ;
    parent.$('body').trigger(PlayerEvents.ANIMATION_COMPLETED);
} ;

Main.onNextButtonPressed = function () {
    Main.soundManager.playSystemSound("radiotoggle") ;
    Main.soundManager.hideReplayButton() ;
    Main.soundManager.lastSound = null ;
    if (Main.$customNextButton) {
        Main.$customNextButton.off("click") ;
        Main.$customNextButton.hide() ;
        Main.$customNextButton = null ;
        StepManager.nextStep() ;
    }else {
        Main.hideNextButton(StepManager.nextStep);
    }

};

Main.showNextButton = function (e) {
    if (e.routeTo) {routeToXML(e.routeTo);}
    if (e.customID) {
        Main.$customNextButton = $("#"+e.customID) ;
        Main.$customNextButton.one("click", Main.onNextButtonPressed) ;
        Main.$customNextButton.show() ;
    } else {
        //Main.$nextButton.show() ;
        Main.$nextButton.one("click", Main.onNextButtonPressed) ;
        Main.rotateNavigationButton(Main.$nextButton) ;
    }
    if (!e.disableReplay)
        Main.soundManager.showReplayButton(e.customReplayID) ;
};

Main.hideNextButton = function (handler) {
    Main.rotateNavigationButton(Main.$nextButton, true, handler) ;
} ;


Main.showSubmitButton = function (e) {
    //Main.$submitButton.show() ;
    Main.rotateNavigationButton(Main.$submitButton) ;
    if (!e.disableReplay)
        Main.soundManager.showReplayButton() ;
};

Main.hideSubmitButton = function (handler) {
    Main.rotateNavigationButton(Main.$submitButton, true, handler) ;
} ;

Main.rotateNavigationButton = function ($button, inverse, handler) {
    $button.show() ;
    if ($.fx.off) {
        complete() ;
        return ;
    }


    var tween = {queue:false, easing:"easeInSine", duration:0.2*Main.timeMultiplier, complete:complete} ;
    var transformOrigin = "50% 100%", initAngle = 90;

    tween.step = function(now) {
        $button.css({
            transform: 'rotateX(' + now + 'deg)'
        });
    } ;

    $button.css("transform-origin", transformOrigin) ;
    Main.soundManager.playSystemSound("showbutton") ;

    inverse ? $({deg: 0}).animate({deg: initAngle}, tween) : $({deg: initAngle}).animate({deg: 0}, tween);

    function complete() {
        $button.css("transform-origin", "") ;
        $button.css("transform", "") ;
        if (inverse)
            $button.hide() ;
        if (handler)
            handler() ;
    }
} ;

Main.showSubtitles = function (s) {
    var $obj = Main.$subtitlesPopup ;
    var $xml = $(Main.xml) ;
    var text = $xml.find('sound[id="'+s + '"]').find('ttsText').html() ;
    if (text && text.length) {
        $obj.find('p').remove() ;
        $obj.append('<p>'+text+'</p>') ;
        $obj.show() ;
        $obj.position({my:"center", at:"center", of:Main.$viewer}) ;
        var p2 = {left:Main.$subtitlesPopup.css("left"), top:Main.$subtitlesPopup.css("top"), opacity:1} ;
        $obj.position({my:"center", at:"center", of:Main.soundManager.$replayButton}) ;
        $obj.css("opacity", "0") ;

        var tween = {queue:false, easing:"easeOutBack", complete:complete, duration:300} ;

        tween.step = function(now) {
            $obj.css({
                transform: 'scale(' + now + ')'
            });
        } ;
        $({deg: 0.1}).animate({deg: 1}, tween);
        $obj.animate(p2, {queue:false, easing:"easeOutCubic", duration:300}) ;
    }

    function complete() {
        $obj.css('transform', '') ;
        $obj.position({my:"center", at:"center", of:Main.$viewer}) ;
    }
} ;

Main.hideSubtitles = function () {
    Main.$subtitlesPopup.hide() ;
};

var PlayerEvents = {
    SOUNDS_LOADED:"soundsLoaded",
    STEP_STARTED:"stepStarted",
    CONTENT_READY:"contentready",
    SHOW_NEXT_BUTTON:"showNextButton",
    SHOW_SUBMIT_BUTTON:"showSubmitButton",
    ANSWER_ACCEPTED:"answerAccepted",
    ANIMATION_COMPLETED:"animationCompleted",
    FRAME_INITIALISED: "frameInitialised"
};

var StepManager = {
    xml:undefined,
    currentStepNum:-1
};

StepManager.start = function(xml) {
    StepManager.xml = xml ;
    StepManager.nextStep() ;
};

StepManager.nextStep = function() {
    StepManager.currentStepNum++ ;
    var curXML = StepManager.getCurrentStepXML() ;
    if (!curXML) {
        Main.$viewer.trigger( PlayerEvents.ANIMATION_COMPLETED );
        return ;
    }

    if (StepManager.isInvalidNode(curXML) || !StepManager.checkCondition(curXML)) {
        StepManager.nextStep() ;
        return ;
    }

    console.log("Current step 11111", curXML) ;

    switch (curXML.nodeName) {
        case "next" :  StepManager.createNextStep(curXML) ; break ;
        case "step" :  StepManager.createSimpleStep(curXML) ; break ;
        case "submit" : StepManager.createSubmitStep(curXML) ; break ;
        case "pause" : StepManager.pauseAnimation(curXML) ; break ;
        default : StepManager.nextStep() ;
    }
};

StepManager.createNextStep = function(xml) {
    var customID = null ;
    if (xml.hasAttribute("customID"))
        customID = xml.getAttribute("customID") ;
    var routeTo = null;   
    if (xml.hasAttribute("routeTo"))
    routeTo = xml.getAttribute("routeTo");
    var customReplayID = null ;
    if (xml.hasAttribute("customReplayID"))
        customReplayID = xml.getAttribute("customReplayID") ;
    var disableReplay = false ;
    if (xml.hasAttribute("disableReplay"))
        disableReplay = xml.getAttribute("disableReplay") === "true" ;
    Main.$viewer.trigger( {type:PlayerEvents.SHOW_NEXT_BUTTON, customID:customID, routeTo: routeTo, customReplayID:customReplayID, disableReplay:disableReplay});
} ;

StepManager.isInvalidNode = function (node) {
    return node.nodeName === "#text" || node.nodeName === "#comment" ;
} ;

StepManager.pauseAnimation = function (xml) {
    var delay = xml.hasAttribute("delay") ? parseFloat(xml.getAttribute("delay")) : 0.5 ;
    delay *= Main.timeMultiplier ;
    setTimeout(StepManager.nextStep, delay) ;
} ;

StepManager.getCurrentStepXML = function(){
    return StepManager.xml.childNodes[StepManager.currentStepNum] ;
};

StepManager.checkCondition = function(node) {
    if (node.hasAttribute("if")) {
        var ifCondition = node.getAttribute("if");
    } else return true ;

    var args = [] ;
    var vals = [] ;
    for (var id in Main.globalDictionary) {
        args.push(id) ;
        vals.push(Main.globalDictionary[id]) ;
    }

    var f = new Function(args.toString(),'"use strict";return ' + ifCondition + ";") ;
    return f.apply(null,vals) ;
};

StepManager.createSimpleStep = function(xml) {
    var tc = new TotalComplete(complete) ;

    var soundID = xml.getAttribute("soundID") ;

    if (soundID) {
        Main.$viewer.trigger({type:PlayerEvents.STEP_STARTED, soundID:soundID});
        Main.soundManager.play(soundID, tc.onComplete(), "") ;
        Main.soundManager.lastSound = soundID ;
    }


    for (var i = 0; i<xml.childNodes.length; i++)
        if (!StepManager.isInvalidNode(xml.childNodes[i]) && StepManager.checkCondition(xml.childNodes[i]))
            StepManager.createSubStep(xml.childNodes[i], tc.onComplete()) ;

    tc.start() ;

    function complete() {
        StepManager.nextStep() ;
    }
} ;

StepManager.createSubStep = function (node, handler) {
    switch (node.nodeName) {
        case "show" : StepManager.showStep(node,handler) ; break ;
        case "hide" : StepManager.hideStep(node,handler) ; break ;
        case "shade" : StepManager.shadeStep(node,handler) ; break ;
        case "unshade" : StepManager.unshadeStep(node,handler) ; break ;
        case "animate" : StepManager.animateStep(node,handler) ; break ;
        case "scale" : StepManager.scaleStep(node,handler) ; break ;
        case "scale2" : StepManager.scale2Step(node,handler) ; break ;
        case "showCounters" : StepManager.showCountersStep(node,handler) ; break ;
        case "lightLamp" : StepManager.lightLampStep(node,handler) ; break ;
        case "drop" : StepManager.dropStep(node,handler) ; break ;
        case "dropDown" : StepManager.dropDownStep(node,handler) ; break ;
        case "blind" : StepManager.blindStep(node,handler) ; break ;
        case "showWTD" : StepManager.showWTDStep(node,handler) ; break ;
        case "rotate" : StepManager.rotateStep(node,handler) ; break ;
        case "rotate2" : StepManager.rotate2Step(node,handler) ; break ;
        case "css" : StepManager.updateCSSstep(node,handler) ; break ;
        case "turnOver" : StepManager.turnOverStep(node,handler) ; break ;
        case "explode" : StepManager.explodeStep(node,handler) ; break ;
        case "move" : StepManager.moveStep(node,handler) ; break ;
        case "moveFrom" : StepManager.moveFromStep(node,handler) ; break ;
        case "play" : StepManager.playSoundStep(node,handler) ; break ;
        case "playVideo" : StepManager.playVideoStep(node,handler) ; break ;
        case "highlight" : StepManager.highlightStep(node,handler) ; break ;
        case "resetIndication" : StepManager.resetIndicationStep(node,handler) ; break ;
        case "pointMarker" : Main.marker.pointAction(node,handler) ; break ;
        case "underlineMarker" : Main.marker.underlineAction(node,handler) ; break ;
        case "circleMarker" : Main.marker.circleAction(node,handler) ; break ;
        case "replaceAnswerInput" : StepManager.replaceAnswerInput(node,handler) ; break ;
        case "replaceAnswerToggle" : StepManager.replaceAnswerToggle(node,handler) ; break ;
        case "clearControl" : StepManager.clearControlStep(node,handler) ; break ;
        case "dndMove" : StepManager.dndMove(node,handler) ; break ;
        case "gameAction" : StepManager.gameAction(node,handler) ; break ;
        default : handler() ; break ;
    }
} ;

StepManager.getDelay = function (xml) {
    var delay = (xml.hasAttribute("delay")) ? Number(xml.getAttribute("delay")) : 0 ;
    return delay * Main.timeMultiplier ;
} ;

StepManager.getObject = function (id) {
    var $obj = $("#"+id) ;
    if ($obj.length === 0) {
        console.warn("Unknown object with id="+id) ;
        return null ;
    }
    return $obj ;
} ;

StepManager.shadeStep = function(xml,handler){
    var id = xml.getAttribute("id") ;
    var delay = StepManager.getDelay(xml) ;
    var $obj = StepManager.getObject(id) ;

    if (!$obj) {
        handler() ;
        return ;
    }

    setTimeout(start, delay) ;

    function start() {
        $obj.animate({opacity:0.3}, {duration:300, complete:handler, queue:false}) ;
    }

} ;

StepManager.gameAction = function(xml,handler){
    var delay = StepManager.getDelay(xml) ;
    var $obj = $("#speedgame")[0] ;

    setTimeout(start, delay) ;

    function start() {
        $obj.contentWindow.Game.action(xml, handler) ;
    }

} ;

StepManager.unshadeStep = function(xml,handler){
    var id = xml.getAttribute("id") ;
    var delay = StepManager.getDelay(xml) ;
    var $obj = StepManager.getObject(id) ;

    if (!$obj) {
        handler() ;
        return ;
    }

    setTimeout(start, delay) ;

    function start() {
        $obj.animate({opacity:1}, {duration:300, complete:handler, queue:false}) ;
    }

} ;

StepManager.distributeStepBetweenIDs = function (xml,handler) {
    var ids = xml.getAttribute("id") ;
    var tc = new TotalComplete(handler) ;
    var delay = (xml.hasAttribute("delay")) ? Number(xml.getAttribute("delay")) : 0 ;
    var stagger = (xml.hasAttribute("stagger")) ? Number(xml.getAttribute("stagger")) : 0 ;


    ids.split(",").forEach(function (id) {
        var node = xml.cloneNode() ;
        node.setAttribute("id", id) ;
        node.setAttribute("delay", String(delay)) ;
        delay += stagger ;
        StepManager.createSubStep(node, tc.onComplete()) ;
    }) ;

    tc.start() ;
} ;

StepManager.showStep = function(xml,handler){
    var id = xml.getAttribute("id") ;
    if (id.split(",").length > 1) {
        StepManager.distributeStepBetweenIDs(xml,handler) ;
        return ;
    }
    var delay = StepManager.getDelay(xml) ;
    var type = (xml.hasAttribute("type")) ? xml.getAttribute("type") : "fadein" ;
    var $obj = StepManager.getObject(id) ;

    if (!$obj) {
        handler() ;
        return ;
    }

    if (!xml.hasAttribute("type") && $obj.hasClass("counter") ) {
        type = "jumpout" ;
    }
    setTimeout(start, delay) ;

    function start() {
        if (type === "jumpout") {
            $obj.css("opacity",1);
            $obj.css("display","none");
            $obj.show({effect:"scale", easing:"easeOutBack", complete:handler, queue:false}) ;
        } else {
            $obj.show() ;
            $obj.css("visibility","visible");
            $obj.css("opacity",0);
            $obj.animate({opacity:1}, {duration:500, complete:handler, queue:false}) ;
        }
    }
} ;

StepManager.hideStep = function(xml,handler){
    var id = xml.getAttribute("id") ;
    if (id.split(",").length > 1) {
        StepManager.distributeStepBetweenIDs(xml,handler) ;
        return ;
    }

    var delay = StepManager.getDelay(xml) ;
    var keepContent = (xml.hasAttribute("keepContent")) ? xml.getAttribute("keepContent") === "true" : false ;
    var disableDelete = (xml.hasAttribute("disableDelete")) ? xml.getAttribute("disableDelete") === "true" : false ;
    var $obj = StepManager.getObject(id) ;

    if (!$obj) {
        handler() ;
        return ;
    }

    if ($obj.is("input") && ($obj.prop("type") === "radio" || $obj.prop("type") === "checkbox")) {
        $obj = $obj.parent() ;
    }

    setTimeout(start, delay) ;

    function start() {
        if (!keepContent) {
            hideWithContent() ;
        } else {
            if ($obj.hasClass("dndTarget")) {
                var $card = $obj.find(".dndCard") ;
                if ($card.length === 0) {
                    hideWithContent() ;
                    return ;
                }
                $obj.find(".crossLine").fadeOut() ;
                $card.unwrap() ;
                $card.animate({
                    backgroundColor: "rgba( 255, 255, 255, 0 )", color: "#4F5C75",
                    borderColor: "rgba( 255, 255, 255, 0 )"
                }, 500, minizePadding) ;

                function minizePadding() {
                    var w1 = $card.width() ;
                    $card.css("width","") ;
                    var w2 = $card.width() ;
                    var dw = (w1 - w2) / 2 ;
                    $card.css("padding-left", dw) ;
                    $card.css("padding-right", dw) ;
                    $card.animate({padding: 0, margin: 0, border: 0}, 300, handler) ;
                }

            }else {
                $obj.find(".crossLine").fadeOut() ;
                $obj.animate({
                    backgroundColor: "rgba( 255, 255, 255, 0 )", color: "#4F5C75",
                    borderColor: "rgba( 255, 255, 255, 0 )"
                }, 500).animate({padding: 0, margin: 0, border:0}, 300, extractContent);
            }
        }
    }

    function hideWithContent() {
        $obj.animate({opacity:0}, {duration:500, complete:deleteContent, queue:false}) ;
    }


    function extractContent() {
        $obj.children().unwrap() ;
        handler() ;
    }

    function deleteContent() {
        if (disableDelete) {
            handler() ;
            return ;
        }
        var $span = $('<span style="display: inline-block; width:50px; height: 50px; rgba(0,0,0,0) white-space: nowrap;"/>') ;
        $span.width($obj.outerWidth()) ;
        $span.height($obj.outerHeight()) ;
        $obj.replaceWith($span) ;
        $span.animate({width:0}, 300, function () {
                $span.remove() ;
                handler() ;
            }) ;
    }

} ;

StepManager.animateStep = function(xml,handler){
    var id = xml.getAttribute("id") ;
    var delay = StepManager.getDelay(xml) ;
    var time = (xml.hasAttribute("time")) ? Number(xml.getAttribute("time")) : 0.5 ;
    var easing = xml.hasAttribute("easing") ? xml.getAttribute("easing") : "swing" ;
    var $obj = StepManager.getObject(id) ;

    if (!$obj) {
        handler() ;
        return ;
    }

    var tweenObj = {} ;
    if (xml.hasAttribute("x"))
        tweenObj.left = xml.getAttribute("x") ;
    if (xml.hasAttribute("y"))
        tweenObj.top = xml.getAttribute("y") ;
    if (xml.hasAttribute("opacity"))
        tweenObj.opacity = xml.getAttribute("opacity") ;
    if (xml.hasAttribute("color")) {
        tweenObj.color = xml.getAttribute("color") ;
        var $bars = ($obj.hasClass("fracBar")) ? $obj : $obj.find(".fracBar") ;
    }


    var options = {easing:easing, duration:time*Main.timeMultiplier, queue:false, complete:handler} ;
    setTimeout(start, delay) ;

    function start() {
        if ($bars && $bars.length ){
            $bars.animate({backgroundColor:tweenObj.color},
                {easing:easing, duration:time*Main.timeMultiplier, queue:false} ) ;
        }
        $obj.animate(tweenObj,options);
    }

} ;

StepManager.scaleStep = function(xml,handler){
    var id = xml.getAttribute("id") ;
    var delay = StepManager.getDelay(xml) ;
    var time = (xml.hasAttribute("time")) ? Number(xml.getAttribute("time")) : 0.5 ;
    var scale = xml.getAttribute("scale") ;
    var origin = "middle,center" ;
    if (xml.hasAttribute("origin"))
        origin = xml.getAttribute("origin") ;
    var easing = xml.hasAttribute("easing") ? xml.getAttribute("easing") : "swing" ;
    origin = origin.split(",") ;

    var $obj = StepManager.getObject(id) ;

    if (!$obj) {
        handler() ;
        return ;
    }

    setTimeout(start, delay) ;
    
    function start() {
        $obj.effect({effect:"scale", duration:time*Main.timeMultiplier, percent:scale*100, origin:origin,
            queue:false, complete:handler, easing:easing}) ;
    }
} ;


StepManager.scale2Step = function(xml,handler){
    var id = xml.getAttribute("id");
    var delay = StepManager.getDelay(xml);
    var $obj = StepManager.getObject(id) ;

    if (!$obj) {
        handler() ;
        return ;
    }

    var from = (xml.hasAttribute("from")) ? Number(xml.getAttribute("from")) : -1 ;
    var scale = Number(xml.getAttribute("scale")) ;
    var time = (xml.hasAttribute("time")) ? Number(xml.getAttribute("time")) : 0.5 ;
    var easing = xml.hasAttribute("easing") ? xml.getAttribute("easing") : "swing" ;

    var origin = null ;
    if (xml.hasAttribute("origin"))
        origin = xml.getAttribute("origin") ;

    setTimeout(startAnimation, delay);

    function startAnimation() {
        if (origin) {
            $obj.css("transform-origin", origin) ;
        }

        if (from < 0)
            from = getScaleFromMatrix() ;

        var tween = {easing:easing, duration:time*Main.timeMultiplier, queue:false, complete:complete} ;

        tween.step = function(now) {
            $obj.css({
                transform: 'scale(' + now + ')'
            });
        } ;


        $({scale: from}).animate({scale: scale}, tween);

    }

    function complete() {
        $obj.css('transform', 'scale('+ String(scale) +')') ;
        if (handler) handler() ;
    }

    // See https://css-tricks.com/get-value-of-css-rotation-through-javascript/
    function getScaleFromMatrix() {
        var tr = $obj.css("transform") ;
        if (tr === "none")
            return 1 ;
        var values = tr.split('(')[1];
        values = values.split(')')[0];
        values = values.split(',');
        var a = values[0];
        var b = values[1];
        return Math.sqrt(a*a + b*b);
    }


} ;



StepManager.showCountersStep = function(xml,handler){
    var ids = xml.getAttribute("id") ;
    var tc = new TotalComplete(handler) ;
    var delay = (xml.hasAttribute("delay")) ? Number(xml.getAttribute("delay")) : 0 ;
    var stagger = (xml.hasAttribute("stagger")) ? Number(xml.getAttribute("stagger")) : 0.2 ;

    ids.split(",").forEach(function (id) {
         var $c = StepManager.getObject(id) ;

         if (!$c) {
             return ;
         }
         var handler = tc.onComplete() ;

         setTimeout(showCounter, delay * Main.timeMultiplier, $c, handler) ;

        delay += stagger ;
    }) ;


    tc.start() ;

    function showCounter($obj, handler) {
        Main.soundManager.playSystemSound("counterblop") ;
        $obj.css("opacity",1);
        $obj.css("display","none");
        $obj.show({effect:"scale", easing:"easeOutBack", complete:handler, queue:false}) ;
    }
} ;

StepManager.lightLampStep = function(xml,handler){
    var id = xml.getAttribute("id") ;
    var delay = StepManager.getDelay(xml) ;
    var $obj = StepManager.getObject(id) ;

    if (!$obj) {
        handler() ;
        return ;
    }

    setTimeout(startAnimation, delay) ;

    function startAnimation() {
        var $grad = $('<div class="rememberLampGradient"/>') ;
        Main.$viewer.append($grad) ;
        $grad.position({my:"center", at:"left+55 top+55", of:$obj}) ;
        Main.soundManager.playSystemSound("rememberlamp") ;
        var t = 200 ;

        var $lamp = $('<div class="rememberLamp"/>') ;
        Main.$viewer.append($lamp) ;
        $lamp.position({my:"center", at:"left+54 top+55", of:$obj}) ;
        $lamp.effect({effect:"scale", duration:t, percent:160, origin:["bottom", "center"]}).effect({effect:"scale", duration:t, percent:0.625, origin:["bottom", "center"]}) ;

        $grad.animate({opacity:0.4}, {duration:t, queue:false}) ;
        $grad.effect({effect:"scale", duration:t, percent:400}).effect({effect:"scale", duration:t, percent:0, complete:complete}) ;

        function complete() {
            $grad.remove() ;
            $lamp.remove() ;
            handler() ;
        }
    }
} ;

StepManager.dropStep = function(xml,handler){
    var id = xml.getAttribute("id") ;
    var delay = StepManager.getDelay(xml) ;
    var $obj = StepManager.getObject(id) ;

    if (!$obj) {
        handler() ;
        return ;
    }
    var size = 1 ;

    setTimeout(startAnimation, delay) ;

    function startAnimation() {
        size = Math.max($obj.width(),$obj.height()) ;
        $obj.css("opacity",1);
        $obj.css("display","none");
        $obj.show() ;
        $obj.effect({effect:"scale", duration:0, percent:200}).effect({effect:"scale", duration:300, percent:50}) ;
        setTimeout(cloud, 0.1 * Main.timeMultiplier) ;
    }

    function cloud() {
        var $img = $('<div class="cloud"/>') ;
        $obj.before($img) ;
        $img.width(size) ;
        $img.height(size) ;
        $img.position({my:"center", at:"center", of:$obj}) ;

        $img.effect({effect:"scale", duration:300, percent:250, queue:false}) ;
        $img.animate({opacity:0}, {duration:300, complete:complete}) ;
        Main.soundManager.playSystemSound("dropdown") ;

        function complete() {
            $img.remove() ;
            handler() ;
        }
    }
} ;

StepManager.dropDownStep = function(xml,handler){
    var id = xml.getAttribute("id") ;
    var delay = StepManager.getDelay(xml) ;
    var $obj = StepManager.getObject(id) ;

    if (!$obj) {
        handler() ;
        return ;
    }

    setTimeout(startAnimation, delay) ;

    function startAnimation() {
        $obj.css("transform-origin", "90% 10%") ;
        Effects.rotate2($obj, 0, -70, {easing:"easeOutBack", duration:0.5*Main.timeMultiplier, queue:false, complete:drop}) ;
    }

    function drop() {
        $obj.animate({top:"+=900"}, {duration:500, queue:false, easing:"easeInCubic", complete:handler}) ;
    }

} ;

StepManager.blindStep = function(xml,handler){
    var id = xml.getAttribute("id") ;
    var delay = StepManager.getDelay(xml) ;
    var direction = (xml.hasAttribute("direction")) ? xml.getAttribute("direction") : "right" ;
    var easing = xml.hasAttribute("easing") ? xml.getAttribute("easing") : "swing" ;
    var time = (xml.hasAttribute("time")) ? Number(xml.getAttribute("time")) : 0.5 ;
    var $obj = StepManager.getObject(id) ;

    if (!$obj) {
        handler() ;
        return ;
    }

    setTimeout(startAnimation, delay) ;

    function startAnimation() {
        $obj.toggle({effect:"blind", direction:direction, queue:false, easing:easing, duration:time*Main.timeMultiplier, complete:handler}) ;
    }

} ;

StepManager.showWTDStep = function(xml,handler){
    var id = xml.getAttribute("id") ;
    var part = (xml.hasAttribute("part")) ? xml.getAttribute("part") : "both" ;
    var delay = StepManager.getDelay(xml) ;
    var $obj = StepManager.getObject(id) ;

    if (!$obj) {
        handler() ;
        return ;
    }
    var $pencil = $obj.find("div.wtdPencil") ;
    if ($pencil.length === 0) {
        console.warn("showWTD error. Object " + id + " is not WTD") ;
        handler() ;
        return ;
    }

    setTimeout(startAnimation, delay) ;

    function startAnimation() {
        if (part === "pencil") {
            showPencil() ;
        } else  {
            $pencil.hide() ;
            $obj.show("fold", {}, 500, part === "popup" ? handler : showPencil) ;
        }
    }

    function showPencil() {
        $pencil.show() ;
        $pencil.css("opacity", 0) ;
        $pencil.animate({opacity:1}, {duration:300, queue:false}) ;
        $pencil.animate({left:"+=200", top:"-=200"}, {duration:0}).animate({left:"-=200", top:"+=200"}, {duration:300, easing:"easeInCubic", complete:rotatePencil}) ;
    }

    function rotatePencil() {
        $pencil.css("transform-origin", "0% 100%") ;
        Effects.rotate2($pencil, 0, -30, {easing:"easeOutSine", duration:200, complete:rotatePencilBack}) ;
    }

    function rotatePencilBack() {
        Effects.rotate2($pencil, -30, 0, {easing:"easeOutBack", complete:handler, duration:300}) ;
    }

} ;

StepManager.turnOverStep = function(xml,handler){
    var id = xml.getAttribute("id") ;
    var delay = StepManager.getDelay(xml) ;
    var direction = (xml.hasAttribute("direction")) ? xml.getAttribute("direction") : "right" ;
    var $obj = StepManager.getObject(id) ;

    if (!$obj) {
        handler() ;
        return ;
    }

    var tween = {queue:false, easing:"easeInOutSine", duration:0.6*Main.timeMultiplier, complete:complete} ;
    var transform ;
    var transformOrigin ;
    var initAngle ;

    switch (direction) {
        case "down" : transformOrigin = "50% 0%"; initAngle = 90; break ;
        case "up" : transformOrigin = "50% 100%"; initAngle = -90; break ;
        case "left" : transformOrigin = "100% 50%"; initAngle = 90 ; break ;
        default : transformOrigin = "0% 50%"; initAngle = -90; break ;
    }

    tween.step = function(now) {
        switch (direction) {
            case "down" :
            case "up" : transform = 'rotateX(' + now + 'deg)' ; break;
            default : transform = 'rotateY(' + now + 'deg)' ;
        }
        $obj.css({
            transform: transform
        });
    } ;

    setTimeout(startAnimation, delay) ;

    function startAnimation() {
        $obj.css("transform-origin", transformOrigin) ;
        $obj.show() ;
        $obj.css("visibility","visible");
        $obj.css("opacity",1);

        switch (direction) {
            case "left" :   $obj.css("left", String(parseInt($obj.css("left")) + 500) + "px") ;
                            $obj.animate({left:"-=500"}, {queue:false, easing:tween.easing, duration:tween.duration}) ;
                            break ;
            case "up" :     $obj.css("top", String(parseInt($obj.css("left")) + 300) + "px") ;
                            $obj.animate({top:"-=300"}, {queue:false, easing:tween.easing, duration:tween.duration}) ;
                            break ;
            case "down" :   $obj.css("top", String(parseInt($obj.css("left")) - 500) + "px") ;
                            $obj.animate({top:"+=500"}, {queue:false, easing:tween.easing, duration:tween.duration}) ;
                            break ;
            default :       $obj.css("left", String(parseInt($obj.css("left")) - 500) + "px") ;
                            $obj.animate({left:"+=500"}, {queue:false, easing:tween.easing, duration:tween.duration}) ;
        }

        $({deg: initAngle}).animate({deg: 0}, tween);
    }

    function complete() {
        $obj.css("transform-origin", "") ;
        $obj.css("transform", "") ;
        handler() ;
    }
} ;

StepManager.explodeStep = function(xml,handler) {
    var id = xml.getAttribute("id");
    var delay = StepManager.getDelay(xml);
    var $obj = StepManager.getObject(id) ;

    if (!$obj) {
        handler() ;
        return ;
    }
    var size = 1;

    setTimeout(startAnimation, delay);

    function startAnimation() {
        Main.soundManager.playSystemSound("fireworks") ;
        size = Math.max($obj.width(),$obj.height()) ;
        $obj.hide({effect:"explode"}) ;
        cloud() ;
    }

    function cloud() {
        var $img = $('<div class="cloud"/>') ;
        $obj.before($img) ;
        $img.width(size) ;
        $img.height(size) ;
        $img.position({my:"center", at:"center", of:$obj}) ;

        $img.effect({effect:"scale", duration:300, percent:250, queue:false}) ;
        $img.animate({opacity:0}, {duration:300, complete:complete}) ;

        function complete() {
            $img.remove() ;
            handler() ;
        }
    }

} ;

StepManager.moveStep = function(xml,handler) {
    var id = xml.getAttribute("id");
    var delay = StepManager.getDelay(xml);
    var $obj = StepManager.getObject(id) ;

    if (!$obj) {
        handler() ;
        return ;
    }
    var time = (xml.hasAttribute("time")) ? Number(xml.getAttribute("time")) : 0.5 ;
    var easing = xml.hasAttribute("easing") ? xml.getAttribute("easing") : "swing" ;
    var my = xml.hasAttribute("my") ? xml.getAttribute("my") : "center" ;
    var at = xml.hasAttribute("at") ? xml.getAttribute("at") : "center" ;
    var targetID = xml.getAttribute("of");
    var $target = $("#" + targetID) ;

    var size = 1;

    setTimeout(startAnimation, delay);

    function startAnimation() {
        var p0 = $obj.offset();
        $obj.position({my:my, at:at, of:$target}) ;
        var p1 = {left:$obj.css("left"), top:$obj.css("top")} ;
        $obj.offset(p0) ;
        $obj.animate({left:p1.left, top:p1.top}, {duration:time*Main.timeMultiplier, queue:false, easing:easing, complete:handler}) ;
    }
} ;

StepManager.moveFromStep = function(xml,handler) {
    var id = xml.getAttribute("id");
    var delay = StepManager.getDelay(xml);
    var $obj = StepManager.getObject(id) ;

    if (!$obj) {
        handler() ;
        return ;
    }

    var time = (xml.hasAttribute("time")) ? Number(xml.getAttribute("time")) : 0.5 ;
    var fontSize = (xml.hasAttribute("fontSize")) ? parseInt(xml.getAttribute("fontSize")) : null ;
    var easing = xml.hasAttribute("easing") ? xml.getAttribute("easing") : "swing" ;
    var my = xml.hasAttribute("my") ? xml.getAttribute("my") : "center" ;
    var at = xml.hasAttribute("at") ? xml.getAttribute("at") : "center" ;
    var targetID = xml.getAttribute("from");
    var $target = $("#" + targetID) ;



    setTimeout(startAnimation, delay);

    function startAnimation() {
        $obj.show() ;
        var p0 = $obj.position();
        if (fontSize) {
            p0.fontSize = parseInt($obj.css("font-size"));
            $obj.css("font-size", fontSize+"px");
        }
        $obj.position({my:my, at:at, of:$target}) ;
        //var p1 = {left:$obj.css("left"), top:$obj.css("top")} ;
        //$obj.css(p0);
        $obj.animate(p0, {duration:time*Main.timeMultiplier, queue:false, easing:easing, complete:handler}) ;
    }
} ;

StepManager.rotateStep = function(xml,handler) {
    var id = xml.getAttribute("id");
    var delay = StepManager.getDelay(xml);
    var $obj = StepManager.getObject(id) ;

    if (!$obj) {
        handler() ;
        return ;
    }
    var angle = Number(xml.getAttribute("angle")) ;
    var time = (xml.hasAttribute("time")) ? Number(xml.getAttribute("time")) : 0.5 ;
    var easing = xml.hasAttribute("easing") ? xml.getAttribute("easing") : "swing" ;

    var origin = null ;
    if (xml.hasAttribute("origin"))
        origin = xml.getAttribute("origin") ;

    var curAngle = 0 ;
    var $div = $('<div/>') ;

    setTimeout(startAnimation, delay);

    function startAnimation() {
        curAngle = getRotationFromMatrix() ;
        if (origin) {
            $obj.css("transform-origin", origin) ;
        }
        $div.css("opacity", 0) ;
        var options = {easing:easing, duration:time*Main.timeMultiplier, queue:false, complete:handler, step:step} ;
        $div.animate({opacity:1}, options)
    }
    
    function step() {
        $obj.css('transform', 'rotate('+ String(curAngle + angle * Number($div.css("opacity"))) +'deg)') ;
    }

    // See https://css-tricks.com/get-value-of-css-rotation-through-javascript/
    function getRotationFromMatrix() {
        var tr = $obj.css("transform") ;
        if (tr === "none")
            return 0 ;
        var values = tr.split('(')[1];
        values = values.split(')')[0];
        values = values.split(',');
        var a = values[0];
        var b = values[1];
        //var c = values[2];
        //var d = values[3];
        var scale = Math.sqrt(a*a + b*b);

        //var sin = b/scale;
        return Math.round(Math.atan2(b, a) * (180/Math.PI));
    }
    
} ;

StepManager.rotate2Step = function(xml,handler) {
    var id = xml.getAttribute("id");
    var delay = StepManager.getDelay(xml);
    var $obj = StepManager.getObject(id) ;

    if (!$obj) {
        handler() ;
        return ;
    }
    var from = (xml.hasAttribute("from")) ? Number(xml.getAttribute("from")) : 0 ;
    var to = Number(xml.getAttribute("to")) ;
    var time = (xml.hasAttribute("time")) ? Number(xml.getAttribute("time")) : 0.5 ;
    var easing = xml.hasAttribute("easing") ? xml.getAttribute("easing") : "swing" ;

    var origin = null ;
    if (xml.hasAttribute("origin"))
        origin = xml.getAttribute("origin") ;

    setTimeout(startAnimation, delay);

    function startAnimation() {
        if (origin) {
            $obj.css("transform-origin", origin) ;
        }
        Effects.rotate2($obj, from, to, {easing:easing, duration:time*Main.timeMultiplier, queue:false, complete:handler}) ;
    }

} ;

StepManager.updateCSSstep = function(xml,handler) {
    var id = xml.getAttribute("id");
    var delay = StepManager.getDelay(xml);
    var $obj = StepManager.getObject(id) ;

    if (!$obj) {
        handler() ;
        return ;
    }
    var style = xml.getAttribute("style").split(';') ;

    setTimeout(startAnimation, delay);

    function startAnimation() {
        style.forEach(function (element) {
            var temp = element.split(":") ;
            if (temp && temp.length === 2)
                $obj.css(temp[0].trim(), temp[1].trim()) ;
        }) ;
        handler() ;
    }

} ;

StepManager.playSoundStep = function(xml,handler) {
    var id = xml.getAttribute("id") ;
    var delay = StepManager.getDelay(xml) ;
    var background = xml.hasAttribute("background") ? xml.getAttribute("background") === "true" : false ;

    setTimeout(startAnimation, delay) ;

    function startAnimation() {
        if (background) {
            Main.soundManager.playBackgroundSound(id, "effect_") ;
            handler() ;
        } else {
            Main.soundManager.play(id, handler, "effect_") ;
        }
    }

} ;

StepManager.playVideoStep = function(xml,handler) {
    var id = xml.getAttribute("id") ;
    var delay = StepManager.getDelay(xml) ;

    setTimeout(startAnimation, delay) ;

    function startAnimation() {
        var $video = $("#"+id) ;
        $video.on("ended", handler) ;
        $video[0].play() ;
    }

} ;

StepManager.highlightStep = function(xml,handler){
    var id = xml.getAttribute("id") ;
    var delay = StepManager.getDelay(xml) ;
    var color = (xml.hasAttribute("color")) ? xml.getAttribute("color") : "#FFFF00" ;
    var withMarker = xml.hasAttribute("marker") ? xml.getAttribute("marker") === "true" : true ;
    var $obj = StepManager.getObject(id) ;

    if (!$obj) {
        handler() ;
        return ;
    }

    var tc = new TotalComplete(onComplete) ;

    if (withMarker) {
        Main.marker.pointAction(xml,tc.onComplete()) ;
    }

    setTimeout(start, delay) ;
    function start() {
        $obj.animate({backgroundColor:color}, {duration:500, queue:false, complete:tc.onComplete()}) ;
        tc.start() ;
    }


    function onComplete() {
        handler() ;
    }
} ;

StepManager.resetIndicationStep = function(xml,handler) {
    var id = xml.getAttribute("id") ;
    var delay = StepManager.getDelay(xml) ;
    var $obj = StepManager.getObject(id) ;

    if (!$obj) {
        handler() ;
        return ;
    }

    setTimeout(start, delay) ;
    function start() {
        $obj.animate({backgroundColor:"rgba( 255, 255, 255, 0 )"}, {duration:500, queue:false, complete:handler}) ;
    }

} ;

StepManager.replaceAnswerInput = function(xml,handler){
    var id = xml.getAttribute("id") ;

    if (Main.controls[id] && Main.controls[id].type === "fraction") {
        StepManager.replaceAnswerFraction(xml, handler) ;
        return ;
    }

    var delay = StepManager.getDelay(xml) ;
    var $control = $("#"+id) ;
    var targetFontSize = parseInt($control.css("font-size")) ;
    var initFontSize = targetFontSize ;
    var $fromObject = undefined ;
    if (xml.hasAttribute("positionObject")) {
        $fromObject = $("#" + xml.getAttribute("positionObject"));
        initFontSize = parseInt($fromObject.css("font-size")) ;
    }
    var jsWrapper = Main.globalDictionary[id] ;
    var cA = $control.is("select") ? jsWrapper.correctAnswer : jsWrapper.correctAnswer.replace("-","−") ;
    var $span = $('<span>' + cA + '</span>') ;
    $span.css("font-size", targetFontSize) ;
    $span.css("white-space", "nowrap") ;

    var fromPoint = {} ;
    var toPoint = {} ;

    setTimeout(startAnimation, delay) ;


    function startAnimation() {
        var  cP = $control.offset() ;
        $span.addClass(jsWrapper.correct ? "replaceInputCorrect" : "replaceInputIncorrect") ;
        Main.$viewer.append($span) ;

        var w1 = $control.outerWidth() ;
        var w2 = $span.outerWidth() ;
        var h1 = $control.outerHeight() ;
        var h2 = $span.outerHeight() ;

        var dp = Main.$viewer.offset() ;

        if (jsWrapper.correct) {
            $span.css("padding-left", String((w1-w2)/2) + "px");
            $span.css("padding-right", String((w1-w2)/2) + "px");
            toPoint = { top: cP.top + h1/2 - h2/2 , left: cP.left  } ;
        } else {
            toPoint = { top: cP.top + h1/2 - h2/2, left: cP.left + w1/2 - w2/2 } ;

            $span.offset(toPoint);
            toPoint = {top:$span.css("top"), left:$span.css("left")} ;
        }

        if (jsWrapper.correct && $control.is("select")) {
            $span.css("padding-left", "13px");
            $span.css("padding-right", String(w1-w2-13) + "px");
            //toPoint = { top: cP.top + h1/2 - h2/2, left: cP.left } ;
            //$span.offset(toPoint);
            //toPoint = {top:$span.css("top"), left:$span.css("left")} ;
        }

        if ($fromObject) {
            cP = $fromObject.offset() ;
            w1 = $fromObject.outerWidth() ;
            h1 = $fromObject.outerHeight() ;
            fromPoint = { top: cP.top + h1/2 - h2/2 , left: cP.left + w1/2 - w2/2 } ;
        }

        if (jsWrapper.incorrect && $fromObject) {
            $span.css("font-size", initFontSize) ;
            $span.position({my:"center", at:"center", of:$fromObject}) ;
        } else {
            if ($control.is("input")) {
                $span.position({my:"center", at:"center", of:$control}) ;
            } else {
                $span.position({my:"left center", at:"left center", of:$control}) ;
            }

        }


        jsWrapper.correct ? correctAnimation() : incorrectAnimation() ;
    }

    function correctAnimation() {
        $control.animate({opacity: 0}, 400, function() {
            $control.after($span) ;
            $span.css("position", "static") ;
            $control.remove() ;
            removePadding() ;
        });

        function removePadding() {
            $span.animate({paddingLeft: 0, paddingRight:0}, 300, handler) ;
        }
    }

    function incorrectAnimation() {
        var tween1 = {padding:"+=10",
            left:"-=10",
            top:"-=10",
            borderTopLeftRadius: "+=10",
            borderTopRightRadius: "+=10",
            borderBottomLeftRadius: "+=10",
            borderBottomRightRadius: "+=10"
        } ;
        var tween2 = {padding:"-=10",
            left:"+=10",
            top:"+=10",
            borderTopLeftRadius: "-=10",
            borderTopRightRadius: "-=10",
            borderBottomLeftRadius: "-=10",
            borderBottomRightRadius: "-=10"
        } ;
        $span.hide().fadeIn().animate(tween1, 300).animate(tween2, 300, $fromObject ? slideToControl : removePadding) ;
        if (!$fromObject)
            $control.delay(500).animate({opacity: 0}, 400) ;

        function slideToControl() {
            var slideTween = {left:toPoint.left, top:toPoint.top, fontSize:targetFontSize} ;
            $span.animate(slideTween,400).animate(tween1, 300).animate(tween2, 300,removePadding) ;
            $control.delay(500).animate({opacity: 0}, 400) ;
        }

        function removePadding() {
            Main.controls[id].clear() ;
            $control.after($span) ;
            $span.css("position", "static") ;
            $span.css("background-color", "transparent");
            var w1 = $control.outerWidth() ;
            var w2 = $span.outerWidth() ;
            var dw = (w1 - w2)/2 ;
            $span.css("padding-right", String(30+dw) + "px");
            $span.css("padding-left", String(30+dw) + "px");
            $control.remove() ;
            $span.animate({padding:0}, 300, handler) ;
        }
    }

};

StepManager.replaceAnswerFraction = function(xml,handler) {
    var id = xml.getAttribute("id") ;
    var jsWrapper = Main.globalDictionary[id] ;
    var delay = StepManager.getDelay(xml) ;
    var control = Main.controls[id] ;
    var $fromObject = undefined ;
    var $frac = $("#" + id) ;
    if (xml.hasAttribute("positionObject")) {
        $fromObject = $("#" + xml.getAttribute("positionObject"));
    }

    var fromPoint = {} ;
    var toPoint = {} ;

    setTimeout(start, delay) ;

    function start() {
        if (jsWrapper.correct) {
            var inputs = control.getInputsArray() ;
            var cArr = control.correctAnswer.split("|") ;
            var spans = [] ;
            $frac.find(".fracCorrect").remove() ;


            for (var i=0; i<inputs.length; i++) {
                var $span = $('<span>' + cArr[i] + '</span>') ;
                $span.addClass("replaceInputCorrect") ;
                var $inp = inputs[i] ;
                Main.$viewer.append($span) ;
                var w1 = $inp.outerWidth() ;
                var w2 = $span.outerWidth() ;
                $span.css("font-size", $inp.css("font-size")) ;
                $span.css("padding-right", String((w1-w2)/2) + "px") ;
                $span.css("padding-left", String((w1-w2)/2) + "px") ;
                $span.position({
                    my: "center",
                    at: "center",
                    of: $inp
                });
                hideInpCorrect($inp, $span) ;
            }

            function hideInpCorrect($inp, $span) {
                $inp.animate({opacity: 0}, 400, function() {
                    $inp.after($span) ;
                    $span.css("font-size", '') ;
                    $span.css("position", "static") ;
                    $inp.remove() ;
                    $span.prop("id", $inp.prop("id")) ;
                    $span.animate({padding:0}, 300, handler) ;
                });
            }
        } else {
            var $newFrac = $('<span class="frac">' + control.correctAnswer + '</span>') ;
            var targetFontSize = parseInt($frac.css("font-size")) ;
            Main.$viewer.append($newFrac) ;
            var ff = new CommonFraction($newFrac) ;
            //if (ff.$wholePart)
                $newFrac = $newFrac.parent() ;
            $newFrac.addClass("replaceFractionIncorrect") ;
            $newFrac.css("font-size", targetFontSize) ;
            $newFrac.position({
                my: "center",
                at: "center",
                of: $frac
            });
            toPoint = $newFrac.position() ;


            var tween1 = {padding:"+=10",
                left:"-=10",
                top:"-=10",
                borderTopLeftRadius: "+=10",
                borderTopRightRadius: "+=10",
                borderBottomLeftRadius: "+=10",
                borderBottomRightRadius: "+=10"
            } ;
            var tween2 = {padding:"-=10",
                left:"+=10",
                top:"+=10",
                borderTopLeftRadius: "-=10",
                borderTopRightRadius: "-=10",
                borderBottomLeftRadius: "-=10",
                borderBottomRightRadius: "-=10"
            } ;

            if ($fromObject) {
                $newFrac.css("font-size", $fromObject.css("font-size")) ;
                $newFrac.position({
                    my: "center",
                    at: "center",
                    of: $fromObject
                });
            }
            $newFrac.hide().fadeIn().animate(tween1, 300).animate(tween2, 300, $fromObject ? slideToControl : removePadding) ;

            function slideToControl() {
                var slideTween = {left:toPoint.left, top:toPoint.top, fontSize:targetFontSize} ;
                $newFrac.animate(slideTween,400).animate(tween1, 300).animate(tween2, 300,removePadding) ;
                $frac.delay(500).animate({opacity: 0}, 400) ;
            }

            function removePadding() {
                $frac.after($newFrac) ;
                $newFrac.css("position", "static") ;
                $newFrac.css("background-color", "transparent");
                var w1 = $frac.outerWidth() ;
                var w2 = $newFrac.outerWidth() ;
                var dw = (w1 - w2)/2 ;
                $newFrac.css("padding-right", String(10+dw) + "px");
                $newFrac.css("padding-left", String(10+dw) + "px");
                $frac.remove() ;
                $newFrac.prop("id", $frac.prop("id")) ;
                $newFrac.animate({padding:0}, 300, handler) ;
                ff.id = id ;
                ff.writeIDs();
            }
        }
    }

} ;


StepManager.replaceAnswerToggle = function(xml,handler) {
    var id = xml.getAttribute("id") ;
    var delay = StepManager.getDelay(xml) ;
    var control = Main.controls[id] ;
    var jsWrapper = Main.globalDictionary[id] ;
    if (jsWrapper.correct) {
        handler() ;
        return ;
    }
    var arr = control.correctAnswer.split(',');
    
    setTimeout(clearControl, delay) ;

    function clearControl() {
        control.clear() ;
        control.updateAllSkins() ;
        selectAnimation() ;
    }

    function selectAnimation() {
        var id = arr.shift() ;

        if (!id) {
            hideMarker() ;
            return ;
        }

        var $rb = $("#" + id) ;
        Main.marker.toggleControl($rb, selectAnimation) ;
    }
    
    function hideMarker(){
        Main.marker.fadeOut(handler) ;
    }

} ;

StepManager.dndMove = function(xml,handler) {
    var id = xml.getAttribute("id") ;
    var jsWrapper = Main.globalDictionary[id] ;
    var delay = StepManager.getDelay(xml) ;
    var control = Main.controls[id] ;

    if (jsWrapper.correct) {
        handler() ;
        return ;
    }
    setTimeout(moveCardsToWetplaces, delay) ;

    function moveCardsToWetplaces() {
        var arr = control.getIcorrectCrads() ;
        if (!arr.length) {
            moveCardsToTargets() ;
            return ;
        }

        var tc = new TotalComplete(moveCardsToTargets) ;

        var dt = 0 ;
        for (var i=0; i<arr.length; i++) {
            setTimeout(setActiveState, dt, arr[i]) ;
            setTimeout(control.dropCarToStage, dt, arr[i]) ;
            setTimeout(control.moveCardToWetplace, dt, arr[i], finishMotion(arr[i],tc.onComplete())) ;
            dt += 200 ;
        }
        tc.start() ;
    }


    function moveCardsToTargets() {
        var tc = new TotalComplete(handler) ;
        var carr = control.correctAnswer.split(',') ;
        var dt = 300 ;

        for (var i=0; i<carr.length; i++) {
            var $card = control.getCardByID(carr[i]) ;
            if (!$card) continue ;
            if ($card.prop("target"))
                continue ;
            var $target = control.targets[i] ;
            setTimeout(setActiveState, dt, $card) ;
            setTimeout(control.dropCarToStage, dt, $card) ;
            setTimeout(control.moveCardToTarget, dt, $card, $target, finishMotion($card,tc.onComplete())) ;
            dt += 200 ;
        }
        tc.start() ;
    }

    function setActiveState($card) {
        $card.removeClass() ;
        $card.addClass("dndCard dndCardActive") ;
    }

    function setDisabledState($card) {
        $card.removeClass() ;
        $card.addClass("dndCard dndCardDisabled") ;
    }

    function finishMotion($card, onComplete) {
        return function () {
            setDisabledState($card) ;
            onComplete() ;
        }
    }

};

StepManager.clearControlStep = function(xml,handler) {
    var id = xml.getAttribute("id");
    var delay = StepManager.getDelay(xml);
    var control = Main.controls[id];

    setTimeout(clearControl, delay);

    function clearControl() {
        control.clear() ;
        if ("updateAllSkins" in control)
            control.updateAllSkins() ;
        handler() ;
    }
} ;

StepManager.createSubmitStep = function(xml) {
    var QuestionID = xml.getAttribute("id") ;
    var QuestionEval = xml.hasAttribute("eval") ? (xml.getAttribute("eval") === "true") : true ;
    var disableReplay = xml.hasAttribute("disableReplay") ? (xml.getAttribute("disableReplay") === "true") : false ;

    var isCorrrect = true ;
    var isNoResponse = false ;

    var customControls = [] ;

    var startTime = new Date() ;

    createCustomControls() ;
    showSubmit() ;

    function createCustomControls() {
        var cXML = xml.getElementsByTagName("controls")[0].childNodes ;

        for (var i=0; i<cXML.length; i++ ) {
            var node = cXML[i] ;
            var newControl ;

            switch (node.nodeName) {
                case "control" :
                    var id = node.getAttribute("id") ;
                    var $control = $("#" + id) ;
                    if (Main.controls[id]) {
                        newControl = Main.controls[id] ;
                        if ("setParams" in newControl)
                            newControl.setParams(node) ;
                    } else if($control.is("input") && ($control.attr("type") === "number"
                        || $control.attr("type") === "text")) {
                        newControl = new InputControl(node) ;
                    } else if ($control.is("select")) {
                        newControl = new ListboxControl(node) ;
                    }
                    break ;
                case "radioControl" : newControl = new RadioControl(node) ; break ;
                case "checkboxControl" : newControl = new CheckboxControl(node) ; break ;
                case "chooseControl" : newControl = new ChooseControl(node) ; break ;
                case "dndControl" : newControl = new DNDControl(node) ; break ;
                default : continue ;
            }
            if (newControl) {
                customControls.push(newControl) ;
                Main.controls[newControl.id] = newControl ;
            }
        }
    }

    function showSubmit() {
        enableInputs() ;
        Main.$submitButton.one("click", onSubmitButtonPressed) ;
        Main.$viewer.trigger( {type:PlayerEvents.SHOW_SUBMIT_BUTTON, disableReplay:disableReplay});
    }

    function enableInputs() {
        customControls.forEach(function(element) {
            element.enable() ;
        });
    }

    function disableInputs() {
        customControls.forEach(function(element) {
            element.disable() ;
        });
    }

    function onSubmitButtonPressed() {
        Main.$submitButton.off( "click" ) ;
        disableInputs() ;
        if(document.activeElement)
            document.activeElement.blur() ;

        Main.soundManager.hideReplayButton() ;
        Main.soundManager.playSystemSound("radiotoggle") ;
        Main.hideSubmitButton(checkStudentAnswer) ;
    }

    function checkStudentAnswer() {
        isCorrrect = true ;
        isNoResponse = false ;
        var answer = {} ;

        customControls.forEach(function(control) {
            var result = control.check() ;
            console.log("Control: " + control.id, result);
            if (control.id === 'noValidation'){
              result.correct = true;
              result.incorrect = false
            }
            answer[control.id] = result ;
            Main.globalDictionary[control.id] = result ;
            if (result.noresponse) {
                isNoResponse = true ;
                isCorrrect = false ;
            } else if (result.incorrect) {
                isCorrrect = false ;
            }
        });

        Main.globalDictionary[QuestionID] = new ReturnType(isCorrrect,isNoResponse) ;
        console.log("Question",QuestionID,"isCorrect",isCorrrect,"NR",isNoResponse) ;
        if (isNoResponse) {
            Main.$viewer.css("opacity", 0.5) ;
            $("#noresponse-bubble").show({effect:"scale", easing:"easeOutBack"}).delay(1000).hide({effect:"puff", complete:function () {
                Main.$viewer.css("opacity", 1) ;
                showSubmit() ;
            }}) ;

        } else {
            generateAnswerEvent() ;
            if (QuestionEval) {
                crossControls() ;
                var $bubble = isCorrrect ? $("#correct-bubble") : $("#incorrect-bubble") ;
                Main.soundManager.playResponse(isCorrrect) ;
                Main.soundManager.lastSound = null ;
                $bubble.fadeIn(500).delay(Main.timeMultiplier).fadeOut(500,StepManager.nextStep) ;
            } else {
                StepManager.nextStep() ;
            }

        }

        function generateAnswerEvent() {
            Main.$viewer.trigger({type:PlayerEvents.ANSWER_ACCEPTED, ID:QuestionID, correct:isCorrrect, answer:answer, mainID:Main.UID, time:(new Date()) - startTime});
        }
    }

    function crossControls() {
        customControls.forEach(function(control) {
            control.cross() ;
        });
    }


} ;

function routeToXML (xmlURL) {
    var baseURL = window.top.location.href;
    var pathnames = baseURL.split('#');
    pathnames[pathnames.length-1] = xmlURL;
    var furl = pathnames[0] + '#' + xmlURL;
    window.top.location.href = furl;
    window.top.location.reload();
  }  

function SoundManager() {
    var me = this ;

    this.enabled = true ;
    this.lastSound = null ;
    this.backgroundInstances = [] ;

    var queue = new createjs.LoadQueue();
    queue.setMaxConnections(10);
    queue.installPlugin(createjs.Sound);

    queue.on("complete", initialLoadingComplete, this);
    queue.loadManifest([
        {id:"system_correct01", src:"player/sounds/correct01.mp3"},
        {id:"system_correct02", src:"player/sounds/correct02.mp3"},
        {id:"system_correct03", src:"player/sounds/correct03.mp3"},
        {id:"system_correct04", src:"player/sounds/correct04.mp3"},
        {id:"system_incorrect01", src:"player/sounds/incorrect01.mp3"},
        {id:"system_incorrect02", src:"player/sounds/incorrect02.mp3"},
        {id:"system_incorrect03", src:"player/sounds/incorrect03.mp3"},
        {id:"system_incorrect04", src:"player/sounds/incorrect04.mp3"},
        {id:"system_markerunderline", src:"player/sounds/markerunderline.mp3"},
        {id:"system_markercircle", src:"player/sounds/markercircle.mp3"},
        {id:"system_radiotoggle", src:"player/sounds/radiotoggle.mp3"},
        {id:"system_counterblop", src:"player/sounds/counterblop.mp3"},
        {id:"system_rememberlamp", src:"player/sounds/rememberlamp.mp3"},
        {id:"system_dropdown", src:"player/sounds/dropdown.mp3"},
        {id:"system_fireworks", src:"player/sounds/fireworks.mp3"},
        {id:"system_showbutton", src:"player/sounds/showbutton.mp3"},
        {id:"system_markerpress", src:"player/sounds/markerpress.mp3"}

        ]) ;

    function initialLoadingComplete() {
        queue.off("complete");
        $( "body" ).trigger(PlayerEvents.SOUNDS_LOADED) ;
    }

    this.preloadSounds = function (xml, handler, prefix) {
        if (!xml) {
            handler() ;
            return ;
        }
        var arr = [] ;
        for (var i=0; i < xml.childNodes.length; i++) {
            var node = xml.childNodes[i] ;
            if (node.nodeName === "sound")
                arr.push({id:prefix+node.getAttribute("id"), src:node.getAttribute("src")}) ;
        }
        queue.on("complete", loadingComplete, this);
        queue.loadManifest(arr) ;

        function loadingComplete() {
            handler() ;
        }
    } ;

    this.playBackgroundSound = function (s, prefix) {
        if (this.enabled) {
            var instance = createjs.Sound.play(prefix+s);
            this.backgroundInstances.push(instance) ;
            instance.on("complete", completeSound);
        }

        function completeSound() {
            ArrayUtils.removeObjectFromArray(instance, this.backgroundInstances) ;
        }
    } ;


    this.play = function(s, handler, prefix) {
        if (this.enabled) {
            var instance = createjs.Sound.play(prefix+s);
            if (instance.playState === createjs.Sound.PLAY_FAILED) {
                console.warn("Unknown sound", s) ;
                handler();
                return ;
            }
            instance.on("complete", handler);
        } else {
            handler() ;
        }
    } ;

    this.playResponse = function (correct) {
        if (this.enabled) {
            var num = MathUtils.roundRandRange(1,4) ;
            this.playSystemSound(correct ? "correct0" + num : "incorrect0" + num);
        }
    } ;

    this.playSystemSound = function (s) {
        if (this.enabled) {
            try {
                createjs.Sound.play("system_" + s);
            } catch (e) {}
        }
    } ;

    this.showReplayButton = function (customReplayID) {
        if (!this.lastSound) return ;
        if (customReplayID) {
            this.$customReplayButton = $("#"+customReplayID) ;
            this.$customReplayButton.click(replayLastSound) ;
            this.$customReplayButton.show() ;
        }
        else {
            this.$replayButton.show() ;
            this.$replayButton.css("left", "580px");
            this.$replayButton.css("top", "900px");
            this.$replayButton.animate({left:"420", top:"850"}, {queue:false, easing:"easeOutCubic", duration:300});
        }
    } ;

    this.hideReplayButton = function () {
        this.$replayButton.hide() ;
        if (this.$customReplayButton) {
            this.$customReplayButton.hide() ;
            this.$customReplayButton = null ;
        }
        if (this.replayInstance)
            this.replayInstance.stop() ;
        Main.hideSubtitles() ;

        this.backgroundInstances.forEach(function (sound) {
            sound.stop() ;
        }) ;

        this.backgroundInstances = [] ;
    } ;

    this.replayInstance = null ;

    function replayLastSound() {
        if (me.replayInstance)
            me.replayInstance.stop() ;
        if (me.lastSound) {
            me.replayInstance = createjs.Sound.play(me.lastSound) ;
            Main.showSubtitles(me.lastSound) ;
        }

    }

    this.$replayButton = $(('<div id="replay-button" />')) ;
    Main.$systemContainer.append(this.$replayButton) ;
    this.$replayButton.click(replayLastSound) ;
    this.$customReplayButton = null ;

}

$(function () {
    $( "body" ).on(PlayerEvents.SOUNDS_LOADED, onSoundsLoaded) ;
    Main.init() ;

    function onSoundsLoaded() {
        console.log("Initial loading completed.") ;
        $( "body" ).off(PlayerEvents.SOUNDS_LOADED, onSoundsLoaded) ;
        Main.status = PlayerEvents.FRAME_INITIALISED ;
        $('body').trigger(PlayerEvents.FRAME_INITIALISED);
        if (parent) {
            parent.$('body').trigger(PlayerEvents.FRAME_INITIALISED);
        }

        try {
            console.log("problemXMLUrl", problemXMLUrl) ;
            Main.autoStart = true ;
            Main.loadXML(problemXMLUrl) ;
        } catch (err) {  }
    }

}) ;

function RadioControl(xml) {
  this.id = xml.getAttribute("id") ;
  this.type = "radio" ;
  this.correctAnswer = xml.getAttribute("correctAnswer") ;
  this.buttons = [] ;

  this.enabled = false ;
  var group = this ;

  xml.getAttribute("buttons").split(",").forEach(function (s) {
      var $b = $("#" + s) ;
      $b.prop("skin", $b.prev()) ;
      this.buttons.push($b) ;

      $b.on("change", function () {
          group.updateAllSkins() ;
      }) ;

  }, this) ;

  this.enable = function () {
      this.enabled = true ;
      this.buttons.forEach(function(button){
          button.prop('disabled', false);
          group.updateSkin(button) ;
      }) ;
  } ;

  this.disable = function () {
      this.enabled = false ;
      this.buttons.forEach(function(button){
          button.prop('disabled', true);
          group.updateSkin(button) ;
      }) ;
  } ;

  this.answer = function () {
      var $selection = this.$selection() ;
      return $selection ? $selection.prop("id") : null ;
  } ;

  this.setAnswer = function (s) {
      var $b = $("#" + s) ;
      $b.prop("checked", true) ;
      $b.trigger("change") ;
  } ;

  this.check = function () {
      var value = this.answer() ;
      var result = (value) ? new ReturnType(value == this.correctAnswer) : new ReturnType(false,true) ;
      result.studentAnswer = value ;
      result.correctAnswer = this.correctAnswer ;
      return  result;
  } ;

  this.cross = function () {
      var $button = this.$selection() ;

      if (!Main.globalDictionary[this.id].correct && $button) {
          var $cross = $('<div class="crossLine"/>') ;
          $cross.width($button.width()+8) ;

          $button.parent().append($cross) ;
          $cross.position({my:"center", at:"center", of:$button}) ;
      }

  } ;

  this.$selection = function () {
      for (var i=0; i<this.buttons.length; i++){
          if (this.buttons[i].prop("checked")) {
              return this.buttons[i] ;
          }
      }
      return null ;
  } ;

  this.clear = function () {
      var $selection = this.$selection() ;

      if ($selection) {
          $selection.parent().find(".crossLine").remove() ;
          $selection.prop("checked", false) ;
      }
      this.updateAllSkins() ;
  } ;

  this.updateAllSkins = function() {
      for (var i=0; i<this.buttons.length; i++){
          this.updateSkin(this.buttons[i]) ;
      }
  } ;

  this.updateSkin = function($button) {
      var $skin = $button.prop("skin") ;
      $skin.removeClass() ;
      $skin.addClass("radio-checkbox") ;

      if (this.enabled) {
          $button.prop("checked") ? $skin.addClass("radioSkinDown") : $skin.addClass("radioSkinUp") ;
      } else {
          $button.prop("checked") ? $skin.addClass("radioSkinDownDisabled") : $skin.addClass("radioSkinUpDisabled") ;
      }
  }
}

function CheckboxControl(xml) {
  RadioControl.call(this,xml) ;
  this.type = "checkbox" ;

  this.$selection = function () {
      var arr = [] ;
      for (var i=0; i<this.buttons.length; i++){
          if (this.buttons[i].prop("checked")) {
              arr.push(this.buttons[i]) ;
          }
      }
      return arr ;
  } ;

  this.answer = function () {
      var arr = this.$selection().map(function($item) {
          return $item.prop('id') ;
      });
      return arr.length ? arr.join(",") : null ;
  } ;

  this.setAnswer = function (s) {
      var arr = s.split(",") ;
      arr.forEach(function (item) {
          var $b = $("#" + item) ;
          $b.prop("checked", true) ;
          $b.trigger("change") ;
      }) ;

  } ;

  this.cross = function () {
      var cArr = this.correctAnswer.split(',') ;
      this.$selection().forEach(function ($button) {
          var id= $button.prop("id") ;
          if (cArr.indexOf(id) < 0) {
              var $cross = $('<div class="crossLine"/>') ;
              $cross.width($button.width() + 8) ;
              $button.parent().append($cross) ;
              $cross.position({my:"center", at:"center", of:$button}) ;
          }
      }) ;
  } ;

  this.clear = function () {
      this.$selection().forEach(function ($item) {
          $item.prop("checked", false) ;
          $item.parent().find(".crossLine").remove() ;
      });
  } ;

  this.updateSkin = function($button) {
      var $skin = $button.prop("skin") ;
      $skin.removeClass() ;
      $skin.addClass("radio-checkbox") ;

      if (this.enabled) {
          $button.prop("checked") ? $skin.addClass("checkboxSkinDown") : $skin.addClass("checkboxSkinUp") ;
      } else {
          $button.prop("checked") ? $skin.addClass("checkboxSkinDownDisabled") : $skin.addClass("checkboxSkinUpDisabled") ;
      }
  }
}

function DNDControl(xml) {
  this.id = xml.getAttribute("id") ;
  this.type = "dnd" ;
  this.correctAnswer = xml.getAttribute("correctAnswer") ;

  this.cards = [] ;
  this.targets = [] ;
  this.wetspots = [] ;

  var cardsDict = {} ;

  var enabled = false ;
  var group = this ;

  xml.getAttribute("cards").split(",").forEach(function (s) {
      var $b = $("#" + s) ;
      this.cards.push($b) ;
      cardsDict[s] = $b ;
  }, this) ;

  xml.getAttribute("targets").split(",").forEach(function (s) {
      var $b = $("#" + s) ;
      this.targets.push($b) ;
  }, this) ;

  createWetspots() ;

  var dragArea = {left:20, top:20, width:Main.$viewer.width(), height:Main.$viewer.height()} ;
  var $hiddenSpan = $( "#hidden_span" ) ;

  var mouseDown = "mousedown" ;
  var mouseMove = "mousemove" ;
  var mouseUp = "mouseup" ;

  if (Main.isTouchDevice) {
      mouseDown = "touchstart" ;
      mouseMove = "touchmove" ;
      mouseUp = "touchend" ;
  }

  this.enable = function () {
      enabled = true ;
      var $body = $(document) ;
      this.cards.forEach(function($card){
          var dx = 0, dy = 0, w = $card.width(), h = $card.height() ;

          $card.on(mouseDown, onMouseDown) ;

          function onMouseDown(event) {
              if ($card.prop("inMotion")) return ;
              group.dropCarToStage($card) ;
              calculateShift(event) ;
              $body.on(mouseMove, onMouseMove) ;
              $body.on(mouseUp, onMouseUp) ;
          }

          function onMouseMove(event) {
              var p = getPointerCoords(event) ;
              p.left += dx ; p.top += dy ;
              $card.offset(p) ;
              p = $card.position() ;
              p.left = MathUtils.clamp(p.left, dragArea.left, dragArea.left + dragArea.width - w ) ;
              p.top = MathUtils.clamp(p.top, dragArea.top, dragArea.top + dragArea.height - h) ;
              $card.css(p) ;
          }

          function onMouseUp(event) {
              $body.off(mouseUp, null, onMouseUp) ;
              $body.off(mouseMove, null,onMouseMove) ;
              var $t = getTargetUnderCard($card) ;
              if ($t !== null)
                  moveCardToTarget($card,$t) ;
              else
                  moveCardToWetplace($card) ;
          }

          function calculateShift(event) {
              var p = $card.offset() ;
              var mp = getPointerCoords(event) ;
              dx = p.left - mp.left ;
              dy = p.top - mp.top ;
          }

          function getPointerCoords(event) {
              var xx, yy ;

              if ("touches" in event && event.touches ) {
                  var touch = event.touches.item(0);
                  xx = touch.pageX; yy = touch.pageY ;
              } else {
                  xx = event.pageX ;
                  yy = event.pageY ;
              }

              return {left:xx,top:yy} ;
          }
      }) ;

      group.updateAllStyles();
  } ;

  this.dropCarToStage = function ($card) {
      var $target = $card.prop("target") ;
      if ($target) {
          $target.prop("card", null);
          $card.prop("target", null) ;
          $target.find(".crossLine").remove() ;
          updateCardStyle($card) ;
          updateTargetStyle($target) ;
      }

      var p = $card.offset() ;
      Main.$viewer.append($card) ;
      $card.css("position", "absolute") ;
      $card.offset(p) ;
  } ;

  function moveCardToTarget($card,$target,handler,instantly) {
      $card.prop("inMotion",true) ;
      $hiddenSpan.position({my:"left top", at:"left top", of:$target}) ;
      var p = $hiddenSpan.position() ;
      instantly ? complete() : $card.animate(p, 300, complete) ;

      function complete() {
          $target.append($card) ;
          $card.prop("target", $target) ;
          $card.css("position", "static") ;
          $target.prop("card", $card) ;
          $card.prop("inMotion",false) ;
          updateCardStyle($card) ;
          updateTargetStyle($target) ;
          if (handler)
              handler() ;
      }
  }

  function moveCardToWetplace($card, handler) {
      $card.prop("inMotion",true) ;
      var $wetspot = $card.prop("wetspot") ;
      $hiddenSpan.position({my:"left top", at:"left top", of:$wetspot}) ;
      var p = $hiddenSpan.position() ;
      $card.animate(p, 300, complete) ;

      function complete() {
          $wetspot.append($card) ;
          $card.css("position", "static") ;
          $card.prop("inMotion",false) ;
          if (handler)
              handler() ;
      }
  }

  function getTargetUnderCard($card) {
      var maxIntersection = 0 ;
      var $nearestTarget = null ;
      var rectC = new Rectangle($card[0].getBoundingClientRect()) ;

      group.targets.forEach(function ($target) {
          if ($target.prop("card")) return ;
          var rectT = new Rectangle($target[0].getBoundingClientRect()) ;

          var intersect = rectC.intersect(rectT) ;
          if (intersect.width < 0 || intersect.height < 0)
              return ;

          var intersectArea = intersect.getArea() ;

          if (intersectArea > maxIntersection) {
              maxIntersection = intersectArea ;
              $nearestTarget = $target ;
          }
      }) ;

      return $nearestTarget ;
  }

  this.disable = function () {
      enabled = false ;
      this.cards.forEach(function(card){
          card.off( mouseDown ) ;
      }) ;
      group.updateAllStyles();
  } ;

  this.updateAllStyles = function() {
      group.cards.forEach(function (b) {
          updateCardStyle(b) ;
      }) ;

      group.targets.forEach(function (b) {
          updateTargetStyle(b) ;
      }) ;

      group.wetspots.forEach(function (b) {
          updateWetspotStyle(b) ;
      }) ;
  } ;

  function updateCardStyle(card) {
      card.removeClass() ;
      card.addClass("dndCard") ;

      var $t = card.prop("target") ;

      if (enabled) {
          card.addClass($t ? "dndCardActiveOnTarget" : "dndCardActive") ;
      } else {
          card.addClass("dndCardDisabled") ;
      }
  }

  function updateTargetStyle(target) {
      target.removeClass() ;
      target.addClass("dndTarget") ;

      var $c = target.prop("card") ;

      if (enabled) {
          target.addClass($c ? "dndTargetWithCard" : "dndTargetActive") ;
      } else {
          target.addClass($c ? "dndTargetWithCard" : "dndTargetDisabled") ;
      }
  }

  function updateWetspotStyle(w) {
      w.removeClass() ;
      w.addClass("dndWetspot") ;

      if (enabled) {
          w.addClass("dndWetspotActive") ;
      } else {
          w.addClass("dndWetspotDisabled") ;
      }
  }

  function createWetspots() {
      group.cards.forEach(function($card){
          var $wet = $('<span class="dndWetspot dndWetspotDisabled"/>') ;
          $wet.width($card.outerWidth()) ;
          $wet.height($card.outerHeight()) ;
          $card.wrap($wet) ;
          $wet = $card.parent() ;
          group.wetspots.push($wet) ;
          $card.prop("wetspot", $wet) ;
          $wet.prop("card", $card) ;
      }) ;
  }


  this.check = function () {
      var value = this.answer() ;
      var result = (checkNoResponse()) ? new ReturnType(false,true) : new ReturnType(value == this.correctAnswer) ;
      result.studentAnswer = value ;
      result.correctAnswer = this.correctAnswer ;
      return  result;
  } ;

  function checkNoResponse() {
      var hasEmptyTargets = false ;
      for (var i=0; i < group.targets.length; i++ ) {
          var $target = group.targets[i];
          if (!$target.prop("card")) {
              hasEmptyTargets = true ;
              break ;
          }
      }
      var hasFreeCards = false;
      for (var i=0; i < group.cards.length; i++ ) {
          var $card = group.cards[i];
          if (!$card.prop("target")) {
              hasFreeCards = true ;
              break ;
          }
      }
      return hasFreeCards && hasEmptyTargets;
  }

  this.answer = function () {
      var arr = [] ;
      this.targets.forEach(function ($target) {
          var $card = $target.prop("card") ;
          arr.push($card ? $card.prop("id") : "") ;
      }) ;
      return arr.join(",") ;
  } ;

  this.setAnswer = function (s) {
     var arr = s.split(",") ;

     for (var i=0; i<arr.length; i++) {
         var $c = this.getCardByID(arr[i]) ;
         if (!$c) continue ;
         this.moveCardToTarget($c, this.targets[i], null, true ) ;
     }
  } ;

  this.cross = function () {
      var carr = this.correctAnswer.split(",") ;
      for (var i=0; i < group.targets.length; i++ ) {
          var $target = group.targets[i];
          var $card = $target.prop("card") ;
          if (!$card) continue ;
          if ($card.prop("id") !== carr[i]) {
              var $cross = $('<div class="crossLine"/>') ;
              $cross.width($card.outerWidth() + 8) ;
              $target.append($cross) ;
              $cross.position({
                  my: "center",
                  at: "center",
                  of: $target
              });
              if ($target.find(".frac").length)
                  $cross.css("transform", 'rotate(-60deg)') ;
          }

      }
  } ;

  this.getIcorrectCrads = function () {
      var carr = this.correctAnswer.split(",") ;
      var result = [] ;
      for (var i=0; i < group.targets.length; i++ ) {
          var $target = group.targets[i];
          var $card = $target.prop("card");
          if (!$card) continue;
          if ($card.prop("id") !== carr[i])
             result.push($card) ;
      }
      return result ;
  } ;

  this.moveCardToWetplace = moveCardToWetplace ;
  this.moveCardToTarget = moveCardToTarget ;

  this.getCardByID = function (id) {
      return cardsDict[id] ;
  } ;

}

function ChooseControl(xml) {
  this.id = xml.getAttribute("id") ;
  this.type = "choose" ;
  this.correctAnswer = xml.getAttribute("correctAnswer") ;
  this.buttons = [] ;

  var radioLogic = this.correctAnswer.split(",").length === 1 ;
  var group = this ;

  xml.getAttribute("buttons").split(",").forEach(function (s) {
      var $b = $("#" + s) ;
      this.buttons.push($b) ;
      $b.prop("chooseGroup", group) ;
  }, this) ;

  var enabled = false ;

  this.enable = function () {
      this.buttons.forEach(function(button){
          enabled = true ;
          button.mousedown(function () {
              if (radioLogic) {
                  group.selection().forEach(function (b) {
                      b.prop("selected",false) ;
                  });
                  button.prop("selected",true) ;
              } else {
                  button.prop("selected", !button.prop("selected")) ;
              }
              group.updateAllStyles();
          });
      }) ;
      group.updateAllStyles();
  } ;

  this.disable = function () {
      enabled = false ;
      this.buttons.forEach(function(button){
          button.off( "mousedown") ;
      }) ;
      group.updateAllStyles();
  } ;

  this.updateAllStyles = function() {
      group.buttons.forEach(function (b) {
          updateStyle(b) ;
      }) ;
  } ;

  this.updateAllSkins = this.updateAllStyles ;

  function updateStyle(button) {
      button.removeClass() ;
      button.addClass("choose") ;
      if (enabled) {
          button.addClass(button.prop("selected") ? "chooseSelected" : "chooseUp") ;
      } else {
          button.addClass(button.prop("selected") ? "chooseSelectedDisabled" : "chooseUpDisabled") ;
      }
  }

  this.answer = function () {
      return this.selection().map(function (b) {
          return b.prop("id") ;
      }).join(',') ;
  } ;

  this.setAnswer = function (s) {
      var arr = s.split(",") ;
      arr.forEach(function (item) {
          var $b = $("#" + item) ;
          $b.trigger("mousedown", true) ;
      }) ;
  } ;

  this.check = function () {
      var value = this.answer() ;
      var result = (value.length > 0) ? new ReturnType(value == this.correctAnswer) : new ReturnType(false,true) ;
      result.studentAnswer = value ;
      result.correctAnswer = this.correctAnswer ;
      return  result;
  } ;

  this.cross = function () {
      var cArr = this.correctAnswer.split(',') ;
      this.selection().forEach(function ($item) {
          var id= $item.prop("id") ;
          if (cArr.indexOf(id) < 0 ) {
              var $cross = $('<div class="crossLine"/>') ;
              $cross.width($item.outerWidth() + 8) ;
              $item.parent().append($cross) ;
              $cross.position({my:"center", at:"center", of:$item}) ;
          }
      }) ;
  } ;

  this.selection = function () {
      return this.buttons.filter(function (b) {
          return Boolean(b.prop("selected")) ;
      }) ;
  } ;

  this.clear = function () {
      this.selection().forEach(function ($item) {
          $item.prop("selected", false) ;
          $item.parent().find(".crossLine").remove() ;
          updateStyle($item) ;
      });
  } ;

}

function InputControl(xml) {
  this.id = xml.getAttribute("id") ;
  this.$control = $("#" + this.id) ;
  this.type = "input" ;
  this.correctAnswer = xml.getAttribute("correctAnswer") ;

  this.cross = function () {
      var jsWrapper = Main.globalDictionary[this.id] ;
      if (!jsWrapper.correct) {
          var $cross = $('<div class="crossLine"/>') ;
          $cross.width(this.$control.width()-6) ;

          this.$control.parent().append($cross) ;
          $cross.position({my:"center", at:"center", of:this.$control}) ;
      }

  } ;

  this.check = function () {
      var value = this.answer().replace("−","-") ;
      var result = (value == "" || !value) ? new ReturnType(false,true) : new ReturnType(Number(value) == Number(this.correctAnswer)) ;
      result.studentAnswer = value ;
      result.correctAnswer = this.correctAnswer ;
      return  result;
  } ;

  this.answer = function () {
      return this.$control.val() ;
  } ;

  this.setAnswer = function (s) {
      this.$control.val(s) ;
      this.$control.trigger("input") ;
  } ;


  this.enable = function () {
      this.$control.prop('disabled', false);
  } ;

  this.disable = function () {
      this.$control.prop('disabled', true);
  } ;

  this.clear = function () {
      this.$control.parent().find(".crossLine").remove() ;
      this.setAnswer("") ;
  } ;
}

function ListboxControl(xml) {
  this.id = xml.getAttribute("id") ;
  this.$control = $("#" + this.id) ;
  this.type = "listbox" ;
  this.correctAnswer = xml.getAttribute("correctAnswer") ;

  this.cross = function () {
      var jsWrapper = Main.globalDictionary[this.id] ;
      if (!jsWrapper.correct) {
          var $cross = $('<div class="crossLine"/>') ;
          $cross.width(this.$control.width()-35) ;

          this.$control.parent().append($cross) ;
          $cross.position({my:"center", at:"center-15 center", of:this.$control}) ;
      }

  } ;

  this.check = function () {
      var value = this.answer() ;
      var result = (value) ? new ReturnType(value == this.correctAnswer) : new ReturnType(false,true) ;
      result.studentAnswer = value ;
      result.correctAnswer = this.correctAnswer ;
      return  result;
  } ;

  this.answer = function () {
      return this.$control.val() ;
  } ;

  this.setAnswer = function (s) {
      this.$control.val(s) ;
      this.$control.trigger("input") ;
  } ;


  this.enable = function () {
      this.$control.prop('disabled', false);
  } ;

  this.disable = function () {
      this.$control.prop('disabled', true);
  } ;

  this.clear = function () {
      this.$control.parent().find(".crossLine").remove() ;
      this.setAnswer("") ;
  } ;
}

function CommonFraction($frac) {
  this.id = $frac.prop("id") ;
  this.type = "fraction" ;
  this.numString = "" ;
  this.denString = "" ;
  this.wholeString = "" ;
  this.acceptReducible = false ;

  this.$numerator = null ;
  this.$denominator = null ;
  this.$bar = null ;
  this.$wholePart = null ;

  var inputs = {} ;

  var me = this ;
  var maxlength = "3" ;

  parseInnerContent() ;
  createInputs() ;

  function parseInnerContent() {
      maxlength = $frac.attr("maxlength") ? $frac.attr("maxlength") : "3" ;
      var arr = $frac.html().trim().split('|') ;
      if (arr.length === 3) {
          me.wholeString = arr.shift() ;
      }
      me.numString = arr[0] ;
      me.denString = arr[1] ;

      $frac.html('') ;
      me.$numerator = $('<span class="numerator">' + me.numString + '</span>') ;
      me.$denominator = $('<span class="denominator">' + me.denString + '</span>') ;
      me.$bar = $('<div class="fracBar"/>') ;
      $frac.append(me.$numerator ) ;
      $frac.append(me.$bar ) ;
      me.$bar.css("backgroundColor", $frac.css("color") ) ;
      $frac.append(me.$denominator ) ;

      $frac.wrap('<span></span>') ;

      if (me.wholeString !== "") {
          me.$wholePart = $('<span>' + me.wholeString + '</span>');
          $frac.before(me.$wholePart);
      }

      if (me.id !== '') {
          $frac.prop("id",me.id+"_frac") ;
      }
      var style = $frac.attr("style") ;
      if (style)
          $frac.removeAttr("style") ;

      $frac = $frac.parent();
      if (me.id !== '') {
          $frac.prop("id",me.id) ;
      }
      if (style)
          $frac.attr("style",style) ;
      $frac.css("white-space", "nowrap");
  }

  function createInputs() {
      var s = '<input type="number" maxlength="' + maxlength + '"/>' ;
      if (me.numString === "#") {
          inputs.$numerator = $(s) ;
          me.$numerator.html('') ;
          me.$numerator.append(inputs.$numerator) ;
      }
      if (me.denString === "#") {
          inputs.$denominator = $(s) ;
          me.$denominator.html('') ;
          me.$denominator.append(inputs.$denominator) ;
      }
      if (me.wholeString === "#") {
          inputs.$wholePart = $(s) ;
          me.$wholePart.html('') ;
          me.$wholePart.append(inputs.$wholePart) ;
      }
  }

  this.writeIDs = function() {
      if (me.id === '') return ;
      if (inputs.$numerator)
          inputs.$numerator.prop("id",me.id + "_num") ;
      else
          me.$numerator.prop("id",me.id + "_num") ;

      if (inputs.$denominator)
          inputs.$denominator.prop("id",me.id + "_den") ;
      else
          me.$denominator.prop("id",me.id + "_den") ;

      if (inputs.$wholePart)
          inputs.$wholePart.prop("id",me.id + "_whole") ;
      else if (me.$wholePart)
          me.$wholePart.prop("id",me.id + "_whole") ;

      me.$bar.prop("id",me.id + "_bar") ;
  } ;

  this.setParams = function (xml) {
      this.correctAnswer = xml.getAttribute("correctAnswer") ;
      if (xml.hasAttribute("acceptReducible"))
          this.acceptReducible = xml.getAttribute("acceptReducible") ;
  } ;

  this.enable = function () {
      for (var s in inputs)
          inputs[s].prop('disabled', false);
  } ;

  this.disable = function () {
      for (var s in inputs)
          inputs[s].prop('disabled', true);
  } ;

  this.answer = function () {
      var arr = [] ;
      if (inputs.$wholePart)
          arr.push(inputs.$wholePart.val()) ;
      if (inputs.$numerator)
          arr.push(inputs.$numerator.val()) ;
      if (inputs.$denominator)
          arr.push(inputs.$denominator.val()) ;
      return arr.join("|") ;
  } ;

  this.setAnswer = function (s) {
      var arr = s.split("|") ;
      if (inputs.$wholePart) {
          inputs.$wholePart.val(arr.shift()) ;
          inputs.$wholePart.trigger("input") ;
      }
      if (inputs.$numerator) {
          inputs.$numerator.val(arr.shift()) ;
          inputs.$numerator.trigger("input") ;
      }
      if (inputs.$denominator) {
          inputs.$denominator.val(arr.shift()) ;
          inputs.$denominator.trigger("input") ;
      }
  } ;

  this.getInputsArray = function () {
      var arr = [] ;
      if (inputs.$wholePart)
          arr.push(inputs.$wholePart) ;
      if (inputs.$numerator)
          arr.push(inputs.$numerator) ;
      if (inputs.$denominator)
          arr.push(inputs.$denominator) ;
      return arr ;
  } ;

  this.check = function () {
      var noresponse = false ;
      for (var s in inputs)
          if (inputs[s].val() ==='')
              noresponse = true ;
      var value = this.answer() ;
      var result ;
      if (noresponse) {
          result = new ReturnType(false,true) ;
      } else {
          if (this.acceptReducible && !me.$wholePart) {
              var arr = this.correctAnswer.split("|") ;
              var n = inputs.$numerator.val() ;
              var d = inputs.$denominator.val() ;
              result = new ReturnType(checkIntegers(n,d) && parseInt(n) / parseInt(d) * parseInt(arr[1]) / parseInt(arr[0])) ;
          } else {
              result = new ReturnType(value === this.correctAnswer) ;
          }
      }

      function checkIntegers(a,b) {
          return !(/\D+/.test(a)) && !(/\D+/.test(b)) && parseInt(b) !== 0 ;
      }

      result.studentAnswer = value ;
      result.correctAnswer = this.correctAnswer ;
      return  result;
  } ;

  this.cross = function () {
      var jsWrapper = Main.globalDictionary[this.id] ;
      if (!jsWrapper.correct) {
          var $cross = $('<div class="crossLine"/>') ;
          $cross.width($frac.width() + 10) ;

          $frac.append($cross) ;
          $cross.position({my:"center", at:"center", of:$frac}) ;
          $cross.css("transform", 'rotate(-60deg)') ;
      }
  } ;

  this.clear = function () {
      $frac.find(".crossLine").remove() ;
      this.setAnswer("||") ;
  } ;

  this.writeIDs() ;
}

function ReturnType(c,n) {
  this.noresponse = Boolean(n) ;
  this.correct = Boolean(c) ;
  this.incorrect = !c ;
  if (n) {
      this.correct = this.incorrect = false ;
  }
  this.studentAnswer = "" ;
  this.correctAnswer = "" ;
}

function Marker() {
  Main.$viewer.append('<div id="globalMarker" class="markerUp"/>') ;
  var $marker = $("#globalMarker") ;
  var $hiddenSpan = $( "#hidden_span" ) ;
  var currentTimer = null ;
  var currentHandler = null ;
  
  function clearCurrentAction() {
      if (currentTimer)
          clearTimeout(currentTimer);
      $marker.stop(true) ;
      if (currentHandler) currentHandler() ;
      setState("up") ;
  }

  this.toggleControl = function ($obj, handler) {
      clearCurrentAction() ;
      currentHandler = handler ;
      $hiddenSpan.position({
          my: "left top",
          at: "center center",
          of: $obj
      });

      var pos = $hiddenSpan.position();

      if (this.visible()) {
          $marker.animate(pos, 500, press) ;
      } else {
          this.fadeIn() ;
          $marker.position({my: "left top", at:"center+100 center+100", of:$obj}) ;
          $marker.animate({top:"-=100", left:"-=100"},500,press) ;
      }

      function press() {
          if ($obj.is(':radio') || $obj.is(':checkbox')) {
              $obj.prop("checked", true) ;
              $obj.trigger("change") ;
          }
          if ($obj.prop("chooseGroup")) {
              $obj.prop("selected",true) ;
              $obj.prop("chooseGroup").updateAllStyles() ;
          }
          createCloud() ;
          click(moveBack) ;
          Main.soundManager.playSystemSound("radiotoggle") ;
      }

      function moveBack() {
          $marker.animate({top:"+=15", left:"+=15"},400,complete) ;
      }

      function complete() {
          if (currentHandler === handler)
              currentHandler = null ;
          handler() ;
      }
  } ;

  this.fadeIn = function (handler) {
      $marker.fadeIn({queue:false,complete:handler}) ;
  } ;

  this.fadeOut = function (handler) {
      $marker.fadeOut({queue:false,complete:handler}) ;
  } ;

  this.visible = function () {
      return $marker.is(":visible") ;
  } ;

  this.pointAction = function (xml, handler) {
      var id = xml.getAttribute("id") ;
      var delay = (xml.hasAttribute("delay")) ? Number(xml.getAttribute("delay")) : 0 ;
      var standby = (xml.hasAttribute("standby")) ? Number(xml.getAttribute("standby")) : 0.3 ;
      var at = (xml.hasAttribute("at")) ? xml.getAttribute("at") : "right-5 bottom-10" ;

      var initTime = 0.5 ;
      var $obj = $("#"+id) ;
      var marker = this ;

      if (delay - initTime < 0) {
          initTime = delay ;
          delay = 0 ;
      } else  {
          delay -= initTime ;
      }

      initTime*= Main.timeMultiplier; delay *= Main.timeMultiplier ; standby *= Main.timeMultiplier ;

      setTimeout(initAction, delay) ;

      function initAction() {
          clearCurrentAction() ;
          currentHandler = handler ;
          if (marker.visible()) {
              $("#hidden_span").position({my:"left top", at:at, of:$obj}) ;
              var toObj = $("#hidden_span").position();
              $marker.animate(toObj, {duration :initTime, complete:press, queue:false}) ;
          } else {
              $marker.fadeIn({queue:false, duration:Math.min(initTime, 400)}) ;
              $marker.position({my:"left top", at:at, of:$obj}) ;
              var pos = $marker.offset() ;
              $marker.offset({top:pos.top + 50, left:pos.left + 50}) ;
              $marker.animate({top:"-=50", left:"-=50"},{duration :initTime, complete:press, queue:false}) ;
          }
      }

      function press() {
          Main.soundManager.playSystemSound("markerpress") ;
          createCloud() ;
          click(moveBack) ;
      }

      function moveBack() {
          $marker.animate({top:"+=5", left:"+=5"},{duration :200, complete:standBy, queue:false}) ;
      }

      function standBy() {
          if (standby < 0) {
              complete() ;
              return ;
          }
          currentTimer = setTimeout(hide, standby) ;
      }

      function hide() {
          $marker.fadeOut({queue:false,complete:complete}) ;
      }

      function complete() {
          if (currentHandler === handler)
              currentHandler = null ;
          handler() ;
      }
  } ;

  this.underlineAction = function (xml, handler) {
      var id = xml.getAttribute("id") ;
      var delay = (xml.hasAttribute("delay")) ? Number(xml.getAttribute("delay")) : 0 ;
      var standby = (xml.hasAttribute("standby")) ? Number(xml.getAttribute("standby")) : 0.3 ;
      var lineID = (xml.hasAttribute("lineID")) ? xml.getAttribute("lineID") : "lineID" + String(Math.round(Math.random()*10000)) ;
      var color = (xml.hasAttribute("color")) ? xml.getAttribute("color") : "blue" ;
      var lineStyle = "background:" + color + ";";
      if ((xml.hasAttribute("lineStyle")))
          lineStyle = xml.getAttribute("lineStyle") ;
      var dy = (xml.hasAttribute("dy")) ? parseInt(xml.getAttribute("dy")) : 0 ;
      var dx = (xml.hasAttribute("dx")) ? parseInt(xml.getAttribute("dx")) : 0 ;
      var initTime = 0.5 ;
      var $obj = $("#"+id) ;
      var lineWidth = 100 ;
      var marker = this ;
      var $line ;
      var pos ;

      if (delay - initTime < 0) {
          initTime = delay ;
          delay = 0 ;
      } else  {
          delay -= initTime ;
      }

      initTime*= Main.timeMultiplier; delay *= Main.timeMultiplier ; standby *= Main.timeMultiplier ;

      setTimeout(initAction, delay) ;

      function initAction() {
          clearCurrentAction() ;
          currentHandler = handler ;
          createLine() ;
          calculateLineWidth() ;
          pos = $line.offset() ;
          if (marker.visible()) {
              $("#hidden_span").offset(pos) ;
              var toObj = $("#hidden_span").position();
              $marker.animate(toObj,{duration :initTime, complete:moveAlong, queue:false}) ;
          } else {
              $marker.fadeIn({queue:false, duration:Math.min(initTime, 400)}) ;
              $marker.offset({top:pos.top + 50, left:pos.left + 50}) ;
              $marker.animate({top:"-=50", left:"-=50"},{duration :initTime, complete:moveAlong, queue:false}) ;
          }
      }

      function moveAlong() {
          setState("down") ;
          Main.soundManager.playSystemSound("markerunderline") ;
          $marker.animate({left:"+=" + String(lineWidth)},{duration :500, queue:false} ) ;
          $line.animate({width:lineWidth}, {duration :500, complete:moveBack, queue:false} ) ;
      }

      function moveBack() {
          setState("up") ;
          $marker.animate({top:"+=5", left:"+=5"},{duration :200, complete:standBy, queue:false}) ;
      }

      function createLine() {
          $obj.parent().append('<span class="markerUnderline" id="' + lineID + '" style="' + lineStyle +'"/>') ;
          $line = $("#" + lineID) ;
          $line.position({
              my: "left top",
              at: "left+" + String(-dx) + " bottom+" + dy ,
              of: $obj
          });
      }

      function calculateLineWidth() {
          var arr = id.split(',') ;
          var rect = new Rectangle($("#" + arr.shift())[0].getBoundingClientRect()) ;

          arr.forEach(function (element) {
              rect = rect.union(new Rectangle($("#" + element)[0].getBoundingClientRect()))
          }) ;
          lineWidth = rect.width + 2 * dx;
      }

      function standBy() {
          if (standby < 0) {
              complete() ;
              return ;
          }
          currentTimer = setTimeout(hide, standby) ;
      }

      function hide() {
          $marker.fadeOut({queue:false,complete:complete}) ;
      }

      function complete() {
          if (currentHandler === handler)
              currentHandler = null ;
          handler() ;
      }

  } ;
  
  this.circleAction = function (xml, handler) {
      var id = xml.getAttribute("id") ;
      var delay = (xml.hasAttribute("delay")) ? Number(xml.getAttribute("delay")) : 0 ;
      var standby = (xml.hasAttribute("standby")) ? Number(xml.getAttribute("standby")) : 0.3 ;
      var dx = (xml.hasAttribute("dx")) ? parseInt(xml.getAttribute("dx")) : 20 ;
      var dy = (xml.hasAttribute("dy")) ? parseInt(xml.getAttribute("dy")) : 20 ;

      var initTime = 0.5 ;
      var marker = this ;
      var positions = [] ;

      if (delay - initTime < 0) {
          initTime = delay ;
          delay = 0 ;
      } else  {
          delay -= initTime ;
      }

      initTime*= Main.timeMultiplier; delay *= Main.timeMultiplier ; standby *= Main.timeMultiplier ;

      setTimeout(initAction, delay) ;

      function initAction() {
          clearCurrentAction() ;
          currentHandler = handler ;
          calculatePositions() ;
          var pos = positions.shift() ;
          if (marker.visible()) {
              $marker.animate(pos,{duration:initTime, complete:markerPress, queue:false}) ;
          } else {
              $marker.fadeIn({queue:false, duration:Math.min(initTime, 400)}) ;
              $marker.css("top", pos.top+50) ;
              $marker.css("left", pos.left+50) ;
              $marker.animate({top:"-=50", left:"-=50"},{duration :initTime, complete:markerPress, queue:false}) ;
          }
      }

      var revertEasing = true ;

      function markerPress() {
          setState("down") ;
          Main.soundManager.playSystemSound("markercircle") ;
          moveAlong() ;
      }
      
      function moveAlong() {
          var pos = positions.shift() ;

          if (pos) {
              $marker.animate({top:pos.top}, {duration :200, easing:revertEasing ? "easeOutQuad" : "easeInQuad", queue:false}) ;
              $marker.animate({left:pos.left}, {duration :200, easing:revertEasing ? "easeInQuad" : "easeOutQuad", complete:moveAlong, queue:false}) ;
              revertEasing = !revertEasing ;
          } else standBy() ;
      }

      function standBy() {
          setState("up") ;
          if (standby < 0) {
              complete() ;
              return ;
          }
          currentTimer = setTimeout(hide, standby) ;
      }

      function hide() {
          $marker.fadeOut({queue:false,complete:complete}) ;
      }

      function complete() {
          if (currentHandler === handler)
              currentHandler = null ;
          handler() ;
      }

      function calculatePositions() {
          var $hiddenSpan = $("#hidden_span") ;
          $hiddenSpan.css("left", "0") ;
          $hiddenSpan.css("top", "0") ;
          var r0 = new Rectangle($hiddenSpan[0].getBoundingClientRect()) ;
          var arr = id.split(',') ;
          var rect = new Rectangle($("#" + arr.shift())[0].getBoundingClientRect()) ;

          arr.forEach(function (element) {
              rect = rect.union(new Rectangle($("#" + element)[0].getBoundingClientRect()))
          }) ;
          positions.push({left:rect.getRight()+dx-r0.x, top:rect.getCenterY()-r0.y}) ;
          positions.push({left:rect.getCenterX()-r0.x, top:rect.getBottom()+dy-r0.y}) ;
          positions.push({left:rect.x-dx-r0.x, top:rect.getCenterY()-r0.y}) ;
          positions.push({left:rect.getCenterX()-r0.x, top:rect.y-dy-r0.y}) ;
          positions.push({left:rect.getRight()+dx-r0.x, top:rect.getCenterY()+dy-r0.y}) ;
      }
      
  } ;

  function setState(s) {
      $marker.removeClass() ;
      switch (s) {
          case "down" : $marker.addClass("markerDown") ; break ;
          default : $marker.addClass("markerUp") ; break ;
      }
  }

  function click(handler) {
      setState("down") ;
      setTimeout(up, 0.2 * Main.timeMultiplier) ;

      function up() {
          setState("up") ;
          handler() ;
      }
  }

  function createCloud() {
      var $cloud = $('<div class="markerCloud"/>') ;
      Main.$viewer.append($cloud) ;
      $cloud.position({
          my: "center center",
          at: "left top",
          of: $marker
      });
      $cloud.effect( "scale", {percent:1000,speed:50} );
      $cloud.fadeOut({duration:700, queue:false, complete:function () {
          $cloud.remove();
      }}) ;
  }
}